#!/usr/bin/env python3\n\"\"\"\n🔍 DEBUG CHARACTER TABLE\n=======================\n\nScript debug character table data và voice mapping:\n- Kiểm tra character_settings_table có data gì\n- Debug get_character_voice_from_table() method\n- Xem character IDs trong script vs table\n\nAuthor: Voice Studio Team\nDate: 2025-01-26\nIssue: get_character_voice_from_table() returns None\n\"\"\"\n\nimport sys\nimport os\nsys.path.append('src')\n\ndef debug_character_table():\n    \"\"\"Debug character table data\"\"\"\n    print(\"🔍 DEBUGGING CHARACTER TABLE\")\n    print(\"=\" * 50)\n    \n    try:\n        from PySide6.QtWidgets import QApplication\n        \n        # Create QApplication if not exists\n        app = QApplication.instance()\n        if app is None:\n            app = QApplication(sys.argv)\n        \n        # Import và create window\n        from ui.advanced_window import AdvancedMainWindow\n        window = AdvancedMainWindow()\n        \n        print(\"\\n📋 1. SCRIPT DATA CHARACTERS:\")\n        # Kiểm tra script data hiện tại\n        if hasattr(window, 'script_data') and window.script_data:\n            print(f\"   📄 Script loaded: {len(window.script_data)} segments\")\n            \n            # Extract unique characters từ script\n            all_characters = set()\n            for segment in window.script_data:\n                for dialogue in segment.get('dialogues', []):\n                    speaker = dialogue.get('speaker', 'unknown')\n                    all_characters.add(speaker)\n            \n            print(f\"   🎭 Characters in script: {sorted(all_characters)}\")\n        else:\n            print(\"   ❌ No script data loaded\")\n        \n        print(\"\\n📋 2. CHARACTER SETTINGS TABLE:\")\n        # Kiểm tra character_settings_table\n        if hasattr(window, 'character_settings_table') and window.character_settings_table:\n            table = window.character_settings_table\n            row_count = table.rowCount()\n            print(f\"   📊 Table rows: {row_count}\")\n            \n            for row in range(row_count):\n                # Column 0: Character name/ID\n                name_item = table.item(row, 0)\n                char_name = name_item.text() if name_item else \"None\"\n                \n                # Column 4: Voice dropdown\n                voice_widget = table.cellWidget(row, 4)\n                if voice_widget and hasattr(voice_widget, 'currentText'):\n                    voice_value = voice_widget.currentText()\n                else:\n                    voice_value = \"None\"\n                \n                print(f\"   [{row}] Character: '{char_name}' → Voice: '{voice_value}'\")\n        else:\n            print(\"   ❌ No character_settings_table found\")\n        \n        print(\"\\n📋 3. VOICE MAPPING TABLE:\")\n        # Kiểm tra current_voice_mapping\n        if hasattr(window, 'current_voice_mapping') and window.current_voice_mapping:\n            print(f\"   📄 Voice mapping: {len(window.current_voice_mapping)} entries\")\n            for char_id, voice_settings in window.current_voice_mapping.items():\n                suggested_voice = voice_settings.get('suggested_voice', 'None')\n                print(f\"   🎭 '{char_id}' → '{suggested_voice}'\")\n        else:\n            print(\"   ❌ No current_voice_mapping found\")\n        \n        print(\"\\n📋 4. TEST get_character_voice_from_table():\")\n        # Test method với characters thực tế\n        test_characters = ['narrator', 'character1', 'character2', 'Lan', 'Minh']\n        \n        for char_id in test_characters:\n            try:\n                voice_name = window.get_character_voice_from_table(char_id)\n                print(f\"   🧪 '{char_id}' → '{voice_name}'\")\n            except Exception as e:\n                print(f\"   ❌ '{char_id}' → ERROR: {e}\")\n        \n        print(\"\\n✅ Character table debug completed!\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Debug failed: {e}\")\n        import traceback\n        traceback.print_exc()\n        return False\n\ndef show_fix_suggestions():\n    \"\"\"Show suggestions to fix character mapping issue\"\"\"\n    print(\"\\n💡 FIX SUGGESTIONS:\")\n    print(\"=\" * 50)\n    print(\"\\n🔧 If character table is empty:\")\n    print(\"   1. Kiểm tra script có đúng format không\")\n    print(\"   2. Re-populate character table sau khi load script\")\n    print(\"   3. Manually assign voices trong character table\")\n    \n    print(\"\\n🔧 If character names không match:\")\n    print(\"   1. Script characters: 'character1', 'character2', 'narrator'\")\n    print(\"   2. Table có thể expect: 'Lan', 'Minh', etc.\")\n    print(\"   3. Cần normalize character names hoặc update mapping\")\n    \n    print(\"\\n🔧 Recommended immediate fix:\")\n    print(\"   1. Manual assign voices trong UI character table\")\n    print(\"   2. Hoặc update current_voice_mapping programmatically\")\n    print(\"   3. Hoặc fix get_character_voice_from_table() method\")\n\ndef main():\n    \"\"\"Main debug execution\"\"\"\n    print(\"🚀 CHARACTER TABLE DEBUG\")\n    print(\"=\" * 50)\n    \n    if debug_character_table():\n        print(\"✅ Debug completed successfully!\")\n        show_fix_suggestions()\n    else:\n        print(\"❌ Debug failed!\")\n        print(\"\\n💡 Try:\")\n        print(\"   1. Ensure Voice Studio UI is properly initialized\")\n        print(\"   2. Load a script first before debugging\")\n        print(\"   3. Check if character table is populated\")\n\nif __name__ == \"__main__\":\n    main()" 