{
  "permissions": {
    "allow": [
      "Bash(python:*)",
      "Bash(Scripts/pip.exe install numpy)",
      "Bash(Scripts/pip.exe install whisper)",
      "Bash(Scripts/pip.exe install openai-whisper)",
      "Bash(powershell:*)",
      "Bash(git restore:*)",
      "Bash(.venv_clean/Scripts/python.exe:*)",
      "Bash(.venv_cleanScriptsactivate)",
      "Bash(pip install:*)",
      "Bash(.pip.exe install torchaudio==2.3.0+cu118 -f https://download.pytorch.org/whl/torch_stable.html)",
      "Bash(pip.exe install:*)",
      "Bash(pip.exe show:*)",
      "Bash(find:*)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(apt list:*)",
      "Bash(pip3 install:*)",
      "Bash(source:*)",
      "Bash(venv_clean/Scripts/python.exe -m pip install:*)",
      "Bash(venv_clean/Scripts/python.exe:*)",
      "Bash(timeout:*)",
      "Bash(backend/.venv/Scripts/python.exe:*)",
      "Bash(apt:*)",
      "Bash(apt install:*)",
      "Bash(mkdir:*)",
      "Bash(ln:*)",
      "Bash(rg:*)",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(Scripts/activate)",
      "Bash(Scriptsactivate.bat)",
      "Bash(where python)",
      "Bash(venv_cleanScriptspython.exe -c \"\nimport sys\nprint(''Python executable:'', sys.executable)\nprint(''Virtual env check:'', ''venv_clean'' in sys.executable)\ntry:\n    import torchaudio\n    print(''[SUCCESS] torchaudio version:'', torchaudio.__version__)\nexcept ImportError as e:\n    print(''[ERROR] torchaudio import failed:'', e)\n\")",
      "Bash(\"venv_clean/Scripts/python.exe\" -m pip install torch==2.3.0+cu118 torchaudio==2.3.0+cu118 --index-url https://download.pytorch.org/whl/cu118)",
      "Bash(\"venv_clean/Scripts/python.exe\" -c \"\nimport sys\nprint(''Python executable:'', sys.executable)\ntry:\n    import torch\n    print(''[SUCCESS] torch version:'', torch.__version__)\n    import torchaudio\n    print(''[SUCCESS] torchaudio version:'', torchaudio.__version__)\nexcept ImportError as e:\n    print(''[ERROR] Import failed:'', e)\n\")",
      "Bash(\"venv_clean/Scripts/python.exe\" -m pip install torch==2.3.0+cpu torchaudio==2.3.0+cpu --index-url https://download.pytorch.org/whl/cpu)",
      "Bash(\"venv_clean/Scripts/python.exe\" -c \"\ntry:\n    import torch\n    print(''[SUCCESS] torch version:'', torch.__version__)\n    import torchaudio\n    print(''[SUCCESS] torchaudio version:'', torchaudio.__version__)\nexcept ImportError as e:\n    print(''[ERROR] Import failed:'', e)\n\")",
      "Bash(\"venv_clean/Scripts/python.exe\" -m pip install \"numpy<2\")",
      "Bash(\"venv_clean/Scripts/python.exe\" -m pip uninstall torch torchaudio -y)",
      "Bash(\"venv_clean/Scripts/python.exe\" -c \"\nimport torch\nprint(''[SUCCESS] torch version:'', torch.__version__)\nimport torchaudio\nprint(''[SUCCESS] torchaudio version:'', torchaudio.__version__)\nprint(''[INFO] CUDA available:'', torch.cuda.is_available())\n\")",
      "Bash(\"venv_clean/Scripts/python.exe\" -c \"\nimport torch\nprint(''[SUCCESS] torch version:'', torch.__version__)\nimport torchaudio\nprint(''[SUCCESS] torchaudio version:'', torchaudio.__version__)\nprint(''[INFO] CUDA available:'', torch.cuda.is_available())\n\")",
      "Bash(\"venv_clean/Scripts/python.exe\" -c \"\nimport torch\nprint(''[SUCCESS] torch version:'', torch.version.__version__)\nimport torchaudio\nprint(''[SUCCESS] torchaudio version:'', torchaudio.version.__version__)\nprint(''[INFO] CUDA available:'', torch.cuda.is_available())\n\")",
      "Bash(\"venv_clean/Scripts/python.exe\" -c \"\nimport torch\nprint(''torch attributes:'', [attr for attr in dir(torch) if ''version'' in attr.lower() or ''ver'' in attr.lower()])\nimport torchaudio\nprint(''torchaudio attributes:'', [attr for attr in dir(torchaudio) if ''version'' in attr.lower() or ''ver'' in attr.lower()])\n\")",
      "Bash(\"venv_clean/Scripts/python.exe\" -m pip show torch torchaudio)",
      "Bash(pip uninstall:*)",
      "Bash(pip show:*)",
      "Bash(\"venv_clean/Scripts/pip.exe\" show:*)",
      "Bash(\".venv_clean/Scripts/python.exe\" -c \"import sys; sys.path.insert(0, ''src''); from tts.voice_generator import VoiceGenerator; vg = VoiceGenerator(); print(''VoiceGenerator methods:''); [print(f''  {method}'') for method in dir(vg) if not method.startswith(''_'')]\")",
      "Bash(\".venv_clean/Scripts/python.exe\" test_chatterbox_method.py)",
      "Bash(git checkout:*)"
    ],
    "deny": []
  }
}