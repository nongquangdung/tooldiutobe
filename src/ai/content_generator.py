import openai
import os
from dotenv import load_dotenv
import json
import requests

load_dotenv('config.env')

class ContentGenerator:
    def __init__(self, api_manager=None):
        # Kh·ªüi t·∫°o t·∫•t c·∫£ clients
        self.openai_client = None
        self.claude_client = None
        self.deepseek_client = None
        self.api_manager = api_manager
        
        # OpenAI
        openai_key = os.getenv('OPENAI_API_KEY')
        if openai_key and openai_key != 'sk-test-key-replace-with-real-key':
            self.openai_client = openai.OpenAI(api_key=openai_key)
            
        # Claude/Anthropic
        claude_key = os.getenv('CLAUDE_API_KEY')
        if claude_key and claude_key not in ['your_claude_api_key_here', 'sk-ant-']:
            try:
                import anthropic
                self.claude_client = anthropic.Anthropic(api_key=claude_key)
            except ImportError:
                print("‚ö†Ô∏è  Anthropic package ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Ch·∫°y: pip install anthropic")
                
        # DeepSeek
        deepseek_key = os.getenv('DEEPSEEK_API_KEY')
        if deepseek_key and deepseek_key not in ['your_deepseek_api_key_here', 'sk-']:
            print(f"üîë DeepSeek API Key: {deepseek_key[:10]}...")
            try:
                self.deepseek_client = openai.OpenAI(
                    api_key=deepseek_key,
                    base_url="https://api.deepseek.com"
                )
                print("‚úÖ DeepSeek client initialized")
            except Exception as e:
                print(f"‚ùå DeepSeek client initialization failed: {e}")
                self.deepseek_client = None
        
        if not any([self.openai_client, self.claude_client, self.deepseek_client]):
            print("‚ö†Ô∏è  Ch∆∞a c·∫•u h√¨nh API key cho AI content generation")
    
    def generate_script_from_prompt(self, prompt, provider=None):
        """Sinh k·ªãch b·∫£n t·ª´ prompt, chia th√†nh c√°c ƒëo·∫°n"""
        # X√°c ƒë·ªãnh provider
        if not provider:
            provider = os.getenv('CONTENT_PROVIDER', 'OpenAI GPT-4')
        
        system_prompt = """
        B·∫°n l√† chuy√™n gia vi·∫øt k·ªãch b·∫£n video ng·∫Øn. H√£y t·∫°o k·ªãch b·∫£n t·ª´ prompt c·ªßa ng∆∞·ªùi d√πng.
        Chia k·ªãch b·∫£n th√†nh 3-5 ƒëo·∫°n, m·ªói ƒëo·∫°n kho·∫£ng 10-15 gi√¢y.
        
        QUAN TR·ªåNG: Ph√¢n bi·ªát r√µ c√°c nh√¢n v·∫≠t/vai tr√≤ trong c√¢u chuy·ªán.
        - "narrator": Ng∆∞·ªùi k·ªÉ chuy·ªán (gi·ªçng trung t√≠nh)
        - "character1": Nh√¢n v·∫≠t ch√≠nh (c√≥ th·ªÉ l√† nam/n·ªØ)
        - "character2": Nh√¢n v·∫≠t ph·ª• (n·∫øu c√≥)
        - "system": Th√¥ng b√°o h·ªá th·ªëng (n·∫øu c√≥)
        
        Format JSON b·∫Øt bu·ªôc:
        {
            "segments": [
                {
                    "id": 1,
                    "script": "N·ªôi dung k·ªãch b·∫£n ƒëo·∫°n n√†y",
                    "image_prompt": "M√¥ t·∫£ ·∫£nh cho ƒëo·∫°n n√†y",
                    "dialogues": [
                        {
                            "speaker": "narrator",
                            "text": "L·ªùi tho·∫°i c·ªßa ng∆∞·ªùi k·ªÉ chuy·ªán",
                            "emotion": "neutral"
                        },
                        {
                            "speaker": "character1", 
                            "text": "L·ªùi tho·∫°i c·ªßa nh√¢n v·∫≠t ch√≠nh",
                            "emotion": "happy"
                        }
                    ],
                    "duration": 12
                }
            ],
            "characters": [
                {
                    "id": "narrator",
                    "name": "Ng∆∞·ªùi k·ªÉ chuy·ªán",
                    "gender": "neutral",
                    "suggested_voice": "vi-VN-Standard-C"
                },
                {
                    "id": "character1",
                    "name": "T√™n nh√¢n v·∫≠t",
                    "gender": "female",
                    "suggested_voice": "vi-VN-Standard-A"
                }
            ]
        }
        
        L∆∞u √Ω: Ch·ªâ JSON thu·∫ßn, kh√¥ng markdown.
        """
        
        # Th·ª≠ theo th·ª© t·ª± ∆∞u ti√™n
        if provider == 'DeepSeek' and self.deepseek_client:
            return self._generate_with_deepseek(system_prompt, prompt)
        elif provider == 'Claude (Anthropic)' and self.claude_client:
            return self._generate_with_claude(system_prompt, prompt)
        elif provider == 'OpenAI GPT-4' and self.openai_client:
            return self._generate_with_openai(system_prompt, prompt)
        elif provider == 'Auto (th·ª≠ theo th·ª© t·ª±)':
            # Th·ª≠ DeepSeek tr∆∞·ªõc (r·∫ª nh·∫•t)
            if self.deepseek_client:
                result = self._generate_with_deepseek(system_prompt, prompt)
                if "error" not in result:
                    return result
            # R·ªìi Claude
            if self.claude_client:
                result = self._generate_with_claude(system_prompt, prompt)
                if "error" not in result:
                    return result
            # Cu·ªëi c√πng OpenAI
            if self.openai_client:
                return self._generate_with_openai(system_prompt, prompt)
        else:
            # Fallback t·ª± ƒë·ªông
            if self.openai_client:
                return self._generate_with_openai(system_prompt, prompt)
            elif self.claude_client:
                return self._generate_with_claude(system_prompt, prompt)
            elif self.deepseek_client:
                return self._generate_with_deepseek(system_prompt, prompt)
        
        return {"error": "Kh√¥ng c√≥ AI provider n√†o kh·∫£ d·ª•ng. Vui l√≤ng c·∫•u h√¨nh √≠t nh·∫•t m·ªôt API key."}
    
    def _generate_with_openai(self, system_prompt, prompt):
        """Sinh n·ªôi dung b·∫±ng OpenAI"""
        try:
            response = self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=1024,
                temperature=0.7
            )
            content = response.choices[0].message.content
            return json.loads(content)
        except Exception as e:
            return {"error": f"L·ªói OpenAI: {str(e)}"}
    
    def _generate_with_claude(self, system_prompt, prompt):
        """Sinh n·ªôi dung b·∫±ng Claude"""
        try:
            response = self.claude_client.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=1024,
                messages=[
                    {"role": "user", "content": f"{system_prompt}\n\nUser prompt: {prompt}"}
                ]
            )
            content = response.content[0].text
            return json.loads(content)
        except Exception as e:
            return {"error": f"L·ªói Claude: {str(e)}"}
    
    def _generate_with_deepseek(self, system_prompt, prompt):
        """Sinh n·ªôi dung b·∫±ng DeepSeek"""
        try:
            response = self.deepseek_client.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=1024,
                temperature=0.7
            )
            
            content = response.choices[0].message.content
            
            # Debug: In ra content ƒë·ªÉ check
            print(f"üîç DeepSeek raw response: {content[:200]}...")
            
            # L√†m s·∫°ch content (ƒë√¥i khi c√≥ markdown wrapper)
            content = content.strip()
            if content.startswith('```json'):
                content = content.replace('```json', '').replace('```', '').strip()
            elif content.startswith('```'):
                content = content.replace('```', '').strip()
            
            # Th·ª≠ parse JSON
            try:
                return json.loads(content)
            except json.JSONDecodeError as je:
                print(f"‚ùå DeepSeek JSON parse error: {je}")
                print(f"Raw content: {content}")
                
                # Fallback: t·∫°o response m·∫´u v·ªõi nhi·ªÅu characters
                print("üîÑ Using fallback with multiple characters...")
                return self._create_fallback_with_characters(prompt, content)
                
        except Exception as e:
            return {"error": f"L·ªói DeepSeek: {str(e)}"}
    
    def _create_fallback_with_characters(self, prompt, content=""):
        """T·∫°o fallback response v·ªõi nhi·ªÅu characters d·ª±a tr√™n prompt"""
        # Ph√¢n t√≠ch prompt ƒë·ªÉ t√¨m characters
        prompt_lower = prompt.lower()
        characters = [
            {
                "id": "narrator",
                "name": "Ng∆∞·ªùi k·ªÉ chuy·ªán",
                "gender": "neutral", 
                "suggested_voice": "vi-VN-Standard-C"
            }
        ]
        
        # Detect characters from prompt
        if any(word in prompt_lower for word in ['c√¥ b√©', 'c√¥ g√°i', 'b√© g√°i', 'n·ªØ']):
            characters.append({
                "id": "character1",
                "name": "Nh√¢n v·∫≠t n·ªØ",
                "gender": "female",
                "suggested_voice": "vi-VN-Wavenet-A"
            })
        
        if any(word in prompt_lower for word in ['c·∫≠u b√©', 'ch√†ng trai', 'b√© trai', 'nam']):
            characters.append({
                "id": "character2", 
                "name": "Nh√¢n v·∫≠t nam",
                "gender": "male",
                "suggested_voice": "vi-VN-Wavenet-B"
            })
            
        if any(word in prompt_lower for word in ['g·∫•u', 'th√∫', 'ƒë·ªông v·∫≠t', 'pet']):
            characters.append({
                "id": "character3",
                "name": "Nh√¢n v·∫≠t ƒë·ªông v·∫≠t",
                "gender": "male",
                "suggested_voice": "vi-VN-Standard-D"
            })
        
        # Create dialogues based on characters
        dialogues = [
            {
                "speaker": "narrator",
                "text": content[:150] if content else f"ƒê√¢y l√† c√¢u chuy·ªán t·ª´ prompt: {prompt[:100]}...",
                "emotion": "neutral"
            }
        ]
        
        # Add character dialogues if detected
        if len(characters) > 1:
            for i, char in enumerate(characters[1:], 1):
                if char['gender'] == 'female':
                    text = f"Xin ch√†o! T√¥i l√† {char['name']} trong c√¢u chuy·ªán n√†y."
                elif char['gender'] == 'male' and 'ƒë·ªông v·∫≠t' in char['name']:
                    text = f"Grrr... T√¥i l√† {char['name']}, s·∫µn s√†ng phi√™u l∆∞u!"
                else:
                    text = f"Ch√†o m·ªçi ng∆∞·ªùi! T√¥i l√† {char['name']}."
                    
                dialogues.append({
                    "speaker": char['id'],
                    "text": text,
                    "emotion": "friendly"
                })
        
        return {
            "segments": [
                {
                    "id": 1,
                    "script": f"C√¢u chuy·ªán ƒë∆∞·ª£c t·∫°o t·ª´ prompt: {prompt}",
                    "image_prompt": "H√¨nh ·∫£nh minh h·ªça cho c√¢u chuy·ªán phi√™u l∆∞u",
                    "dialogues": dialogues,
                    "duration": 15
                }
            ],
            "characters": characters
        }
    
    def refine_segment(self, segment_data, user_feedback, provider=None):
        """Ch·ªânh s·ª≠a m·ªôt ƒëo·∫°n d·ª±a tr√™n feedback"""
        if not provider:
            provider = os.getenv('CONTENT_PROVIDER', 'OpenAI GPT-4')
            
        system_prompt = f"""
        Ch·ªânh s·ª≠a ƒëo·∫°n video n√†y d·ª±a tr√™n feedback c·ªßa ng∆∞·ªùi d√πng.
        ƒêo·∫°n hi·ªán t·∫°i: {segment_data}
        Feedback: {user_feedback}
        
        Tr·∫£ v·ªÅ JSON format t∆∞∆°ng t·ª± ƒëo·∫°n g·ªëc.
        """
        
        # S·ª≠ d·ª•ng provider ƒë∆∞·ª£c ch·ªçn
        if provider == 'DeepSeek' and self.deepseek_client:
            return self._refine_with_deepseek(system_prompt)
        elif provider == 'Claude (Anthropic)' and self.claude_client:
            return self._refine_with_claude(system_prompt)
        elif provider == 'OpenAI GPT-4' and self.openai_client:
            return self._refine_with_openai(system_prompt)
        else:
            # Fallback
            if self.openai_client:
                return self._refine_with_openai(system_prompt)
            elif self.claude_client:
                return self._refine_with_claude(system_prompt)
            elif self.deepseek_client:
                return self._refine_with_deepseek(system_prompt)
        
        return {"error": "Kh√¥ng c√≥ AI provider n√†o kh·∫£ d·ª•ng"}
    
    def _refine_with_openai(self, system_prompt):
        try:
            response = self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "system", "content": system_prompt}],
                max_tokens=512,
                temperature=0.7
            )
            return json.loads(response.choices[0].message.content)
        except Exception as e:
            return {"error": f"L·ªói OpenAI: {str(e)}"}
    
    def _refine_with_claude(self, system_prompt):
        try:
            response = self.claude_client.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=512,
                messages=[{"role": "user", "content": system_prompt}]
            )
            return json.loads(response.content[0].text)
        except Exception as e:
            return {"error": f"L·ªói Claude: {str(e)}"}
    
    def _refine_with_deepseek(self, system_prompt):
        try:
            response = self.deepseek_client.chat.completions.create(
                model="deepseek-chat",
                messages=[{"role": "system", "content": system_prompt}],
                max_tokens=512,
                temperature=0.7
            )
            return json.loads(response.choices[0].message.content)
        except Exception as e:
            return {"error": f"L·ªói DeepSeek: {str(e)}"} 