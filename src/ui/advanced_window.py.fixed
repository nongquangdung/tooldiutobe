from PySide6.QtWidgets import *
from PySide6.QtCore import *
from PySide6.QtGui import *
from .styles import BUTTON_STYLE, LABEL_STYLE, STATUS_LABEL_STYLE, HIGHLIGHTED_LABEL_STYLE
from .emotion_config_tab import EmotionConfigTab
from .license_tab import LicenseTab
from core.audio_metadata_fixer import AudioMetadataFixer
from core.license_manager import license_manager

class VideoGenerationThread(QThread):
    progress_updated = Signal(int, str)
    finished = Signal(dict)
    
    def __init__(self, prompt, project_name, effects, use_custom_images=False, custom_images_folder=None,
                 voice_name="vi-VN-Standard-A", project_folder=None):
        super().__init__()
        self.prompt = prompt
        self.project_name = project_name
        self.effects = effects
        self.use_custom_images = use_custom_images
        self.custom_images_folder = custom_images_folder
        self.voice_name = voice_name
        self.project_folder = project_folder

    def run(self):
        try:
            # Existing run implementation
            pass
        except Exception as e:
            print(f"Error in video generation: {str(e)}")

class AdvancedMainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Voice Studio Advanced")
        self.setup_ui()
        
    def setup_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # Create tabs
        tabs = QTabWidget()
        
        # Voice Studio tab
        voice_studio_tab = QWidget()
        voice_studio_layout = QVBoxLayout()
        
        # Import controls
        import_group = QGroupBox("üì• Import Script")
        import_layout = QVBoxLayout()
        
        # Template selection
        template_group = QGroupBox("üéØ Template Mode")
        template_layout = QVBoxLayout()
        
        self.template_mode_combo = QComboBox()
        self.template_mode_combo.addItems(["RAPID", "STANDARD", "DETAILED"])
        template_layout.addWidget(self.template_mode_combo)
        
        self.token_preview_label = QLabel("Estimated tokens: --")
        self.token_preview_label.setStyleSheet(LABEL_STYLE)
        template_layout.addWidget(self.token_preview_label)
        
        # AI Request Form Button
        self.generate_ai_request_btn = QPushButton("üìã T·∫°o Request Form cho AI")
        self.generate_ai_request_btn.setStyleSheet(BUTTON_STYLE)
        self.generate_ai_request_btn.clicked.connect(self.generate_ai_request_form)
        template_layout.addWidget(self.generate_ai_request_btn)
        
        template_group.setLayout(template_layout)
        import_layout.addWidget(template_group)
        
        # Help section
        help_layout = QVBoxLayout()
        help_title = QLabel("üí° H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:")
        help_title.setStyleSheet(LABEL_STYLE)
        help_layout.addWidget(help_title)
        
        help_text = QLabel(r"""
‚Ä¢ <b>Per-Character Settings</b>: M·ªói nh√¢n v·∫≠t c√≥ th√¥ng s·ªë ri√™ng (Emotion, Speed, CFG Weight)
‚Ä¢ <b>Voice Mode</b>: Ch·ªçn Voice Selection ho·∫∑c Voice Clone cho t·ª´ng nh√¢n v·∫≠t
‚Ä¢ <b>Quick Actions</b>: Nh·∫•n n√∫t üîß ƒë·ªÉ t·ªëi ∆∞u th√¥ng s·ªë t·ª± ƒë·ªông
‚Ä¢ <b>Preview</b>: Nh·∫•n n√∫t üéß ƒë·ªÉ nghe th·ª≠ gi·ªçng v·ªõi settings hi·ªán t·∫°i
""")
        help_text.setStyleSheet(LABEL_STYLE)
        help_text.setWordWrap(True)
        help_layout.addWidget(help_text)
        
        import_group.setLayout(import_layout)
        voice_studio_layout.addWidget(import_group)
        voice_studio_layout.addLayout(help_layout)
        
        voice_studio_tab.setLayout(voice_studio_layout)
        tabs.addTab(voice_studio_tab, "üéôÔ∏è Voice Studio")
        
        layout.addWidget(tabs)
        self.setMinimumSize(800, 600)
        
    def create_status_bar(self):
        # Existing implementation
        pass
        
    def update_api_status_indicator(self):
        # Existing implementation
        pass 