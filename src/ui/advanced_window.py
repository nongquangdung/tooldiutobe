from PySide6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                               QTabWidget, QLabel, QPushButton, QLineEdit, QTextEdit,
                               QProgressBar, QListWidget, QComboBox, QSpinBox, 
                               QCheckBox, QFileDialog, QMessageBox, QScrollArea,
                               QDialog, QRadioButton, QButtonGroup, QSplitter,
                               QGroupBox, QGridLayout)
from PySide6.QtCore import QThread, Signal, Qt
from PySide6.QtGui import QFont
import sys
import os
import subprocess
import platform

# Import pipeline
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from core.video_pipeline import VideoPipeline
from video.effects_presets import EffectsPresets
from ai.prompt_templates import PromptTemplates
from core.api_manager import APIManager
from tts.voice_generator import VoiceGenerator
from .character_voice_dialog import CharacterVoiceDialog
from .manual_voice_setup_dialog import ManualVoiceSetupDialog
from .macos_styles import get_macos_stylesheet, get_macos_window_size

class VideoGenerationThread(QThread):
    progress_updated = Signal(int, str)
    finished = Signal(dict)
    
    def __init__(self, prompt, project_name, effects, use_custom_images=False, custom_images_folder=None,
                 voice_name="vi-VN-Standard-A", project_folder=None):
        super().__init__()
        self.prompt = prompt
        self.project_name = project_name
        self.effects = effects
        self.use_custom_images = use_custom_images
        self.custom_images_folder = custom_images_folder
        self.voice_name = voice_name
        self.project_folder = project_folder
        self.pipeline = VideoPipeline()
    
    def run(self):
        def progress_callback(step, message):
            self.progress_updated.emit(step, message)
        
        # T·∫°o video v·ªõi ho·∫∑c kh√¥ng c√≥ ·∫£nh th·ªß c√¥ng
        if self.use_custom_images and self.custom_images_folder:
            result = self.pipeline.create_video_with_custom_images(
                self.prompt, self.project_name, self.custom_images_folder, 
                self.effects, progress_callback
            )
        else:
            result = self.pipeline.create_video_from_prompt(
                self.prompt, self.project_name, self.effects, progress_callback,
                self.voice_name, self.project_folder
            )
        self.finished.emit(result)

class AdvancedMainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("AI Video Generator - Advanced")
        
        # T·ªëi ∆∞u k√≠ch th∆∞·ªõc cho MacOS 13 inch
        if platform.system() == "Darwin":  # macOS
            window_size = get_macos_window_size()
            self.setGeometry(50, 50, window_size['default_width'], window_size['default_height'])
            self.setMinimumSize(window_size['min_width'], window_size['min_height'])
            self.setMaximumSize(window_size['max_width'], window_size['max_height'])
        else:
            self.setGeometry(100, 100, 1000, 700)
        
        # Kh·ªüi t·∫°o pipeline v√† API manager
        self.pipeline = VideoPipeline()
        self.api_manager = APIManager()
        self.voice_generator = VoiceGenerator()
        self.current_project_id = None
        self.current_script_data = None  # Store generated script data
        
        # Thi·∫øt l·∫≠p style cho macOS
        self.setup_macos_style()
        
        # Widget trung t√¢m v·ªõi tabs
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        layout = QVBoxLayout()
        layout.setContentsMargins(10, 10, 10, 10)  # Gi·∫£m margin
        central_widget.setLayout(layout)
        
        # Tab widget
        self.tabs = QTabWidget()
        layout.addWidget(self.tabs)
        
        # T·∫°o c√°c tabs
        self.create_video_tab()
        self.create_projects_tab()
        self.create_settings_tab()
        
        # T·∫°o status bar
        self.create_status_bar()
    
    def create_status_bar(self):
        """T·∫°o status bar v·ªõi th√¥ng tin h·ªá th·ªëng"""
        status_bar = self.statusBar()
        
        # Status text ch√≠nh
        self.status_text = "‚úÖ S·∫µn s√†ng"
        status_bar.showMessage(self.status_text)
        
        # API status indicator
        self.api_status_label = QLabel("üîë API: Checking...")
        status_bar.addPermanentWidget(self.api_status_label)
        
        # Ki·ªÉm tra API status ngay khi kh·ªüi ƒë·ªông
        self.update_api_status_indicator()
    
    def update_api_status_indicator(self):
        """C·∫≠p nh·∫≠t ch·ªâ b√°o tr·∫°ng th√°i API"""
        # Ki·ªÉm tra xem api_status_label ƒë√£ ƒë∆∞·ª£c t·∫°o ch∆∞a
        if not hasattr(self, 'api_status_label'):
            return
            
        try:
            status = self.api_manager.get_provider_status()
            
            # ƒê·∫øm s·ªë API available
            content_available = sum(status['content_providers'].values())
            image_available = sum(status['image_providers'].values()) 
            tts_available = sum(status['tts_providers'].values())
            
            total_available = content_available + image_available + tts_available
            
            if total_available >= 3:
                self.api_status_label.setText("üü¢ API: ƒê·∫ßy ƒë·ªß")
            elif total_available >= 1:
                self.api_status_label.setText("üü° API: M·ªôt ph·∫ßn")
            else:
                self.api_status_label.setText("üî¥ API: Ch∆∞a c·∫•u h√¨nh")
                
        except Exception:
            if hasattr(self, 'api_status_label'):
                self.api_status_label.setText("‚ö†Ô∏è API: L·ªói")
    
    def setup_macos_style(self):
        """Thi·∫øt l·∫≠p style ph√π h·ª£p v·ªõi macOS"""
        if platform.system() == "Darwin":
            # Font system c·ªßa macOS
            font = QFont("-apple-system", 13)  # macOS system font
            self.setFont(font)
            
            # S·ª≠ d·ª•ng stylesheet t·ª´ file ri√™ng
            self.setStyleSheet(get_macos_stylesheet())
    
    def create_video_tab(self):
        """Tab t·∫°o video m·ªõi v·ªõi layout t·ªëi ∆∞u cho MacOS"""
        tab = QWidget()
        
        # S·ª≠ d·ª•ng scroll area ƒë·ªÉ tr√°nh tr√†n m√†n h√¨nh
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        
        content_widget = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(8)  # Gi·∫£m spacing
        content_widget.setLayout(layout)
        
        # Group 1: Prompt v√† g·ª£i √Ω
        prompt_group = QGroupBox("üìù N·ªôi dung video")
        prompt_layout = QVBoxLayout()
        prompt_layout.setSpacing(6)
        
        # G·ª£i √Ω prompt - layout compact
        suggestions_layout = QGridLayout()
        suggestions_layout.addWidget(QLabel("Danh m·ª•c:"), 0, 0)
        
        self.category_combo = QComboBox()
        categories = PromptTemplates.get_all_categories()
        self.category_combo.addItem("-- Ch·ªçn danh m·ª•c --", "")
        for key, value in categories.items():
            self.category_combo.addItem(value["category"], key)
        self.category_combo.currentTextChanged.connect(self.load_prompt_suggestions)
        suggestions_layout.addWidget(self.category_combo, 0, 1)
        
        self.random_prompt_btn = QPushButton("üé≤ Ng·∫´u nhi√™n")
        self.random_prompt_btn.clicked.connect(self.get_random_prompt)
        suggestions_layout.addWidget(self.random_prompt_btn, 0, 2)
        
        prompt_layout.addLayout(suggestions_layout)
        
        # Danh s√°ch prompt g·ª£i √Ω
        self.prompt_suggestions_list = QComboBox()
        self.prompt_suggestions_list.addItem("-- Ch·ªçn prompt m·∫´u --")
        self.prompt_suggestions_list.currentTextChanged.connect(self.use_suggested_prompt)
        prompt_layout.addWidget(self.prompt_suggestions_list)
        
        # Nh·∫≠p prompt - gi·∫£m chi·ªÅu cao
        self.prompt_input = QTextEdit()
        self.prompt_input.setPlaceholderText("V√≠ d·ª•: T·∫°o video gi·ªõi thi·ªáu v·ªÅ du l·ªãch Vi·ªát Nam v·ªõi 5 ƒëi·ªÉm ƒë·∫øn n·ªïi ti·∫øng...")
        self.prompt_input.setMaximumHeight(80)  # Gi·∫£m t·ª´ 100 xu·ªëng 80
        prompt_layout.addWidget(self.prompt_input)
        
        prompt_group.setLayout(prompt_layout)
        layout.addWidget(prompt_group)
        
        # Group 2: C√†i ƒë·∫∑t d·ª± √°n
        project_group = QGroupBox("‚öôÔ∏è C√†i ƒë·∫∑t d·ª± √°n")
        project_layout = QGridLayout()
        project_layout.setSpacing(6)
        
        # T√™n project
        project_layout.addWidget(QLabel("T√™n d·ª± √°n:"), 0, 0)
        self.project_name_input = QLineEdit()
        self.project_name_input.setPlaceholderText("video_project")
        project_layout.addWidget(self.project_name_input, 0, 1, 1, 2)
        
        # Th∆∞ m·ª•c d·ª± √°n
        project_layout.addWidget(QLabel("Th∆∞ m·ª•c:"), 1, 0)
        self.project_folder_input = QLineEdit()
        self.project_folder_input.setPlaceholderText("M·∫∑c ƒë·ªãnh: ./projects/")
        self.project_folder_input.setReadOnly(True)
        project_layout.addWidget(self.project_folder_input, 1, 1)
        
        self.select_project_folder_btn = QPushButton("üìÅ")
        self.select_project_folder_btn.clicked.connect(self.select_project_folder)
        self.select_project_folder_btn.setMaximumWidth(40)
        project_layout.addWidget(self.select_project_folder_btn, 1, 2)
        
        project_group.setLayout(project_layout)
        layout.addWidget(project_group)
        
        # Group 3: T√πy ch·ªçn ·∫£nh
        image_group = QGroupBox("üñºÔ∏è T√πy ch·ªçn ·∫£nh")
        image_layout = QVBoxLayout()
        image_layout.setSpacing(6)
        
        # Radio buttons trong layout ngang
        image_options_layout = QHBoxLayout()
        self.auto_generate_radio = QCheckBox("T·ª± ƒë·ªông t·∫°o ·∫£nh AI")
        self.auto_generate_radio.setChecked(True)
        self.manual_images_radio = QCheckBox("Ch·ªçn ·∫£nh th·ªß c√¥ng")
        image_options_layout.addWidget(self.auto_generate_radio)
        image_options_layout.addWidget(self.manual_images_radio)
        image_layout.addLayout(image_options_layout)
        
        # Ch·ªçn th∆∞ m·ª•c ·∫£nh
        folder_layout = QHBoxLayout()
        self.select_images_btn = QPushButton("üìÅ Ch·ªçn th∆∞ m·ª•c ·∫£nh")
        self.select_images_btn.clicked.connect(self.select_images_folder)
        self.select_images_btn.setEnabled(False)
        folder_layout.addWidget(self.select_images_btn)
        
        self.selected_images_label = QLabel("Ch∆∞a ch·ªçn th∆∞ m·ª•c ·∫£nh")
        self.selected_images_label.setStyleSheet("color: gray; font-style: italic; font-size: 11px;")
        folder_layout.addWidget(self.selected_images_label)
        image_layout.addLayout(folder_layout)
        
        # K·∫øt n·ªëi s·ª± ki·ªán
        self.manual_images_radio.toggled.connect(self.toggle_image_mode)
        
        image_group.setLayout(image_layout)
        layout.addWidget(image_group)
        
        # Group 4: Hi·ªáu ·ª©ng
        effects_group = QGroupBox("‚ú® Hi·ªáu ·ª©ng")
        effects_layout = QVBoxLayout()
        effects_layout.setSpacing(6)
        
        # Preset hi·ªáu ·ª©ng
        preset_layout = QHBoxLayout()
        preset_layout.addWidget(QLabel("Preset:"))
        self.effects_preset_combo = QComboBox()
        presets = EffectsPresets.get_all_presets()
        for key, preset in presets.items():
            self.effects_preset_combo.addItem(f"{preset['name']} - {preset['description']}", key)
        self.effects_preset_combo.setCurrentText("NƒÉng ƒë·ªông")
        preset_layout.addWidget(self.effects_preset_combo)
        effects_layout.addLayout(preset_layout)
        
        # C√†i ƒë·∫∑t hi·ªáu ·ª©ng t√πy ch·ªânh
        custom_effects_layout = QHBoxLayout()
        self.zoom_checkbox = QCheckBox("Hi·ªáu ·ª©ng zoom")
        self.zoom_checkbox.setChecked(True)
        self.transitions_checkbox = QCheckBox("Chuy·ªÉn c·∫£nh")
        self.transitions_checkbox.setChecked(True)
        custom_effects_layout.addWidget(self.zoom_checkbox)
        custom_effects_layout.addWidget(self.transitions_checkbox)
        effects_layout.addLayout(custom_effects_layout)
        
        effects_group.setLayout(effects_layout)
        layout.addWidget(effects_group)
        
        # Group 5: Actions
        actions_group = QGroupBox("üé¨ T·∫°o video")
        actions_layout = QGridLayout()
        actions_layout.setSpacing(8)
        
        self.generate_story_btn = QPushButton("üìù T·∫°o c√¢u chuy·ªán")
        self.generate_story_btn.clicked.connect(self.generate_story_only)
        self.generate_story_btn.setToolTip("T·∫°o k·ªãch b·∫£n video t·ª´ prompt (Cmd+1)")
        self.generate_story_btn.setShortcut("Cmd+1" if platform.system() == "Darwin" else "Ctrl+1")
        actions_layout.addWidget(self.generate_story_btn, 0, 0)
        
        self.generate_audio_btn = QPushButton("üéµ T·∫°o Audio")
        self.generate_audio_btn.clicked.connect(self.generate_audio_only)
        self.generate_audio_btn.setEnabled(False)
        self.generate_audio_btn.setToolTip("T·∫°o audio t·ª´ k·ªãch b·∫£n ƒë√£ c√≥ (Cmd+2)")
        self.generate_audio_btn.setShortcut("Cmd+2" if platform.system() == "Darwin" else "Ctrl+2")
        actions_layout.addWidget(self.generate_audio_btn, 0, 1)
        
        # N√∫t t·∫°o video ho√†n ch·ªânh
        self.generate_video_btn = QPushButton("üé¨ T·∫°o Video Ho√†n ch·ªânh")
        self.generate_video_btn.clicked.connect(self.start_video_generation)
        self.generate_video_btn.setToolTip("T·∫°o video ho√†n ch·ªânh v·ªõi ·∫£nh v√† √¢m thanh (Cmd+3)")
        self.generate_video_btn.setShortcut("Cmd+3" if platform.system() == "Darwin" else "Ctrl+3")
        actions_layout.addWidget(self.generate_video_btn, 1, 0, 1, 2)
        
        # N√∫t c·∫•u h√¨nh gi·ªçng n√≥i th·ªß c√¥ng (lu√¥n hi·ªÉn th·ªã)
        self.manual_voice_setup_btn = QPushButton("üé≠ C·∫•u h√¨nh gi·ªçng theo nh√¢n v·∫≠t")
        self.manual_voice_setup_btn.clicked.connect(self.show_manual_voice_setup)
        self.manual_voice_setup_btn.setToolTip("T·∫°o v√† c·∫•u h√¨nh gi·ªçng n√≥i cho c√°c nh√¢n v·∫≠t th·ªß c√¥ng (Cmd+4)")
        self.manual_voice_setup_btn.setShortcut("Cmd+4" if platform.system() == "Darwin" else "Ctrl+4")
        actions_layout.addWidget(self.manual_voice_setup_btn, 2, 0, 1, 2)

        
        actions_group.setLayout(actions_layout)
        layout.addWidget(actions_group)
        
        # Group 6: Progress v√† Status
        progress_group = QGroupBox("üìä Ti·∫øn tr√¨nh")
        progress_layout = QVBoxLayout()
        progress_layout.setSpacing(6)
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        progress_layout.addWidget(self.progress_bar)
        
        # Progress label
        self.progress_label = QLabel("")
        self.progress_label.setVisible(False)
        self.progress_label.setStyleSheet("color: #666; font-size: 11px;")
        progress_layout.addWidget(self.progress_label)
        
        # Status v√† preview area
        self.status_label = QLabel("")
        self.status_label.setStyleSheet("color: #007AFF; font-weight: 500;")
        progress_layout.addWidget(self.status_label)
        
        # Preview content area - compact
        preview_label = QLabel("üìÑ Xem tr∆∞·ªõc n·ªôi dung:")
        preview_label.setStyleSheet("font-weight: 600; margin-top: 8px;")
        progress_layout.addWidget(preview_label)
        
        self.content_preview = QTextEdit()
        self.content_preview.setReadOnly(True)
        self.content_preview.setMaximumHeight(120)  # Compact height
        self.content_preview.setPlaceholderText("N·ªôi dung c√¢u chuy·ªán s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y sau khi t·∫°o...")
        progress_layout.addWidget(self.content_preview)
        
        # Audio controls - compact layout
        audio_controls_layout = QGridLayout()
        audio_controls_layout.setSpacing(6)
        
        self.open_audio_folder_btn = QPushButton("üìÅ Th∆∞ m·ª•c Audio")
        self.open_audio_folder_btn.clicked.connect(self.open_audio_folder)
        self.open_audio_folder_btn.setEnabled(False)
        self.open_audio_folder_btn.setToolTip("M·ªü th∆∞ m·ª•c ch·ª©a c√°c file audio ƒë√£ t·∫°o")
        audio_controls_layout.addWidget(self.open_audio_folder_btn, 0, 0)
        
        self.play_final_audio_btn = QPushButton("‚ñ∂Ô∏è Nghe Audio")
        self.play_final_audio_btn.clicked.connect(self.play_final_audio)
        self.play_final_audio_btn.setEnabled(False)
        self.play_final_audio_btn.setToolTip("Ph√°t file audio ho√†n ch·ªânh ƒë√£ gh√©p")
        audio_controls_layout.addWidget(self.play_final_audio_btn, 0, 1)
        
        progress_layout.addLayout(audio_controls_layout)
        
        # Voice settings - compact
        voice_layout = QHBoxLayout()
        voice_layout.addWidget(QLabel("Gi·ªçng TTS:"))
        self.voice_combo = QComboBox()
        vietnamese_voices = [
            "vi-VN-Standard-A (N·ªØ)",
            "vi-VN-Standard-B (Nam)",
            "vi-VN-Standard-C (N·ªØ)",
            "vi-VN-Standard-D (Nam)",
            "vi-VN-Wavenet-A (N·ªØ)",
            "vi-VN-Wavenet-B (Nam)",
            "vi-VN-Wavenet-C (N·ªØ)",
            "vi-VN-Wavenet-D (Nam)"
        ]
        self.voice_combo.addItems(vietnamese_voices)
        voice_layout.addWidget(self.voice_combo)
        progress_layout.addLayout(voice_layout)
        
        progress_group.setLayout(progress_layout)
        progress_group.setVisible(False)  # ·∫®n ban ƒë·∫ßu, hi·ªán khi c·∫ßn
        layout.addWidget(progress_group)
        
        # Store references
        self.progress_group = progress_group
        self.last_audio_output_dir = None
        self.last_final_audio_path = None
        
        # Th√™m stretch ƒë·ªÉ ƒë·∫©y n·ªôi dung l√™n tr√™n
        layout.addStretch()
        
        scroll.setWidget(content_widget)
        
        # Layout ch√≠nh c·ªßa tab
        tab_layout = QVBoxLayout()
        tab_layout.setContentsMargins(0, 0, 0, 0)
        tab_layout.addWidget(scroll)
        tab.setLayout(tab_layout)
        
        self.tabs.addTab(tab, "üé¨ T·∫°o Video")
    
    def create_projects_tab(self):
        """Tab qu·∫£n l√Ω projects v·ªõi layout t·ªëi ∆∞u cho MacOS"""
        tab = QWidget()
        
        # S·ª≠ d·ª•ng splitter ƒë·ªÉ chia ƒë√¥i m√†n h√¨nh
        splitter = QSplitter(Qt.Horizontal)
        
        # Panel tr√°i: Danh s√°ch projects
        left_panel = QWidget()
        left_layout = QVBoxLayout()
        left_layout.setContentsMargins(8, 8, 8, 8)
        left_layout.setSpacing(8)
        
        # Header v·ªõi n√∫t refresh
        header_layout = QHBoxLayout()
        header_layout.addWidget(QLabel("üìÅ Danh s√°ch d·ª± √°n"))
        header_layout.addStretch()
        refresh_btn = QPushButton("üîÑ")
        refresh_btn.setToolTip("L√†m m·ªõi danh s√°ch")
        refresh_btn.setMaximumWidth(40)
        refresh_btn.clicked.connect(self.refresh_projects)
        header_layout.addWidget(refresh_btn)
        left_layout.addLayout(header_layout)
        
        # Danh s√°ch projects
        self.projects_list = QListWidget()
        self.projects_list.itemClicked.connect(self.load_project_details)
        left_layout.addWidget(self.projects_list)
        
        left_panel.setLayout(left_layout)
        splitter.addWidget(left_panel)
        
        # Panel ph·∫£i: Chi ti·∫øt project
        right_panel = QWidget()
        right_layout = QVBoxLayout()
        right_layout.setContentsMargins(8, 8, 8, 8)
        right_layout.setSpacing(8)
        
        # Header chi ti·∫øt
        right_layout.addWidget(QLabel("üìã Chi ti·∫øt d·ª± √°n"))
        
        # Chi ti·∫øt project v·ªõi scroll
        details_scroll = QScrollArea()
        details_scroll.setWidgetResizable(True)
        details_scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        
        self.project_details = QTextEdit()
        self.project_details.setReadOnly(True)
        details_scroll.setWidget(self.project_details)
        right_layout.addWidget(details_scroll)
        
        # N√∫t actions
        actions_group = QGroupBox("üõ†Ô∏è Thao t√°c")
        actions_layout = QGridLayout()
        actions_layout.setSpacing(8)
        
        self.open_folder_btn = QPushButton("üìÅ M·ªü th∆∞ m·ª•c")
        self.open_folder_btn.clicked.connect(self.open_project_folder)
        actions_layout.addWidget(self.open_folder_btn, 0, 0)
        
        self.delete_project_btn = QPushButton("üóëÔ∏è X√≥a d·ª± √°n")
        self.delete_project_btn.clicked.connect(self.delete_project)
        self.delete_project_btn.setProperty("class", "danger")
        actions_layout.addWidget(self.delete_project_btn, 0, 1)
        
        actions_group.setLayout(actions_layout)
        right_layout.addWidget(actions_group)
        
        right_panel.setLayout(right_layout)
        splitter.addWidget(right_panel)
        
        # Thi·∫øt l·∫≠p t·ª∑ l·ªá splitter (40% - 60%)
        splitter.setSizes([400, 600])
        
        # Layout ch√≠nh c·ªßa tab
        tab_layout = QVBoxLayout()
        tab_layout.setContentsMargins(0, 0, 0, 0)
        tab_layout.addWidget(splitter)
        tab.setLayout(tab_layout)
        
        self.tabs.addTab(tab, "üìÅ D·ª± √°n")
        
        # Load projects khi kh·ªüi t·∫°o
        self.refresh_projects()
    
    def create_settings_tab(self):
        """Tab c√†i ƒë·∫∑t v·ªõi layout t·ªëi ∆∞u cho MacOS"""
        tab = QWidget()
        
        # S·ª≠ d·ª•ng scroll area cho settings
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        
        content_widget = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(12)
        layout.setContentsMargins(16, 16, 16, 16)
        content_widget.setLayout(layout)
        
        # Group 1: API Keys cho AI Content
        ai_content_group = QGroupBox("üìù AI Sinh n·ªôi dung")
        ai_content_layout = QGridLayout()
        ai_content_layout.setSpacing(8)
        
        ai_content_layout.addWidget(QLabel("OpenAI API Key (GPT-4):"), 0, 0)
        self.openai_key_input = QLineEdit()
        self.openai_key_input.setEchoMode(QLineEdit.Password)
        self.openai_key_input.setPlaceholderText("sk-...")
        ai_content_layout.addWidget(self.openai_key_input, 0, 1)
        
        ai_content_layout.addWidget(QLabel("Claude API Key:"), 1, 0)
        self.claude_key_input = QLineEdit()
        self.claude_key_input.setEchoMode(QLineEdit.Password)
        self.claude_key_input.setPlaceholderText("sk-ant-...")
        ai_content_layout.addWidget(self.claude_key_input, 1, 1)
        
        ai_content_layout.addWidget(QLabel("DeepSeek API Key:"), 2, 0)
        self.deepseek_key_input = QLineEdit()
        self.deepseek_key_input.setEchoMode(QLineEdit.Password)
        self.deepseek_key_input.setPlaceholderText("sk-...")
        ai_content_layout.addWidget(self.deepseek_key_input, 2, 1)
        
        ai_content_group.setLayout(ai_content_layout)
        layout.addWidget(ai_content_group)
        
        # Group 2: API Keys cho Image Generation
        image_gen_group = QGroupBox("üé® AI T·∫°o ·∫£nh")
        image_gen_layout = QGridLayout()
        image_gen_layout.setSpacing(8)
        
        # DALL-E info
        dalle_info = QLabel("DALL-E (OpenAI) - d√πng chung key OpenAI")
        dalle_info.setStyleSheet("color: #666; font-style: italic; font-size: 11px;")
        image_gen_layout.addWidget(dalle_info, 0, 0, 1, 2)
        
        image_gen_layout.addWidget(QLabel("Midjourney API Key:"), 1, 0)
        self.midjourney_key_input = QLineEdit()
        self.midjourney_key_input.setEchoMode(QLineEdit.Password)
        image_gen_layout.addWidget(self.midjourney_key_input, 1, 1)
        
        image_gen_layout.addWidget(QLabel("Stability AI Key:"), 2, 0)
        self.stability_key_input = QLineEdit()
        self.stability_key_input.setEchoMode(QLineEdit.Password)
        self.stability_key_input.setPlaceholderText("sk-...")
        image_gen_layout.addWidget(self.stability_key_input, 2, 1)
        
        image_gen_group.setLayout(image_gen_layout)
        layout.addWidget(image_gen_group)
        
        # Group 3: API Keys cho Text-to-Speech
        tts_group = QGroupBox("üé§ Text-to-Speech")
        tts_layout = QGridLayout()
        tts_layout.setSpacing(8)
        
        tts_layout.addWidget(QLabel("ElevenLabs API Key:"), 0, 0)
        self.elevenlabs_key_input = QLineEdit()
        self.elevenlabs_key_input.setEchoMode(QLineEdit.Password)
        self.elevenlabs_key_input.setPlaceholderText("sk_...")
        tts_layout.addWidget(self.elevenlabs_key_input, 0, 1)
        
        tts_layout.addWidget(QLabel("Google Cloud TTS Key:"), 1, 0)
        self.google_tts_key_input = QLineEdit()
        self.google_tts_key_input.setEchoMode(QLineEdit.Password)
        tts_layout.addWidget(self.google_tts_key_input, 1, 1)
        
        tts_layout.addWidget(QLabel("Azure Speech Key:"), 2, 0)
        self.azure_speech_key_input = QLineEdit()
        self.azure_speech_key_input.setEchoMode(QLineEdit.Password)
        tts_layout.addWidget(self.azure_speech_key_input, 2, 1)
        
        # Chatterbox TTS Device Info
        chatterbox_info = QLabel("ü§ñ Chatterbox TTS: Auto-detect CUDA/MPS/CPU")
        chatterbox_info.setStyleSheet("color: #007AFF; font-weight: bold; font-size: 12px;")
        tts_layout.addWidget(chatterbox_info, 3, 0, 1, 2)
        
        # Device status button
        self.chatterbox_device_btn = QPushButton("üì± Ki·ªÉm tra Device")
        self.chatterbox_device_btn.clicked.connect(self.show_chatterbox_device_info)
        tts_layout.addWidget(self.chatterbox_device_btn, 4, 0)
        
        # Clear cache button
        self.chatterbox_clear_btn = QPushButton("üßπ X√≥a Cache")
        self.chatterbox_clear_btn.clicked.connect(self.clear_chatterbox_cache)
        tts_layout.addWidget(self.chatterbox_clear_btn, 4, 1)
        
        tts_group.setLayout(tts_layout)
        layout.addWidget(tts_group)
        
        # Group 4: Provider Selection
        providers_group = QGroupBox("‚öôÔ∏è Ch·ªçn nh√† cung c·∫•p")
        providers_layout = QGridLayout()
        providers_layout.setSpacing(8)
        
        providers_layout.addWidget(QLabel("AI Sinh n·ªôi dung:"), 0, 0)
        self.content_provider_combo = QComboBox()
        self.content_provider_combo.addItems(self.api_manager.get_available_content_providers())
        providers_layout.addWidget(self.content_provider_combo, 0, 1)
        
        providers_layout.addWidget(QLabel("AI T·∫°o ·∫£nh:"), 1, 0)
        self.image_provider_combo = QComboBox()
        self.image_provider_combo.addItems(self.api_manager.get_available_image_providers())
        providers_layout.addWidget(self.image_provider_combo, 1, 1)
        
        providers_layout.addWidget(QLabel("Text-to-Speech:"), 2, 0)
        self.tts_provider_combo = QComboBox()
        self.tts_provider_combo.addItems(self.api_manager.get_available_tts_providers())
        providers_layout.addWidget(self.tts_provider_combo, 2, 1)
        
        providers_group.setLayout(providers_layout)
        layout.addWidget(providers_group)
        
        # Group 5: Video Settings
        video_group = QGroupBox("üé¨ C√†i ƒë·∫∑t Video")
        video_layout = QGridLayout()
        video_layout.setSpacing(8)
        
        video_layout.addWidget(QLabel("ƒê·ªô ph√¢n gi·∫£i:"), 0, 0)
        self.resolution_combo = QComboBox()
        self.resolution_combo.addItems(["1920x1080", "1280x720", "1080x1080"])
        video_layout.addWidget(self.resolution_combo, 0, 1)
        
        video_layout.addWidget(QLabel("FPS:"), 1, 0)
        self.fps_spinbox = QSpinBox()
        self.fps_spinbox.setRange(15, 60)
        self.fps_spinbox.setValue(25)
        video_layout.addWidget(self.fps_spinbox, 1, 1)
        
        video_group.setLayout(video_layout)
        layout.addWidget(video_group)
        
        # Group 6: Actions
        actions_group = QGroupBox("üõ†Ô∏è Thao t√°c")
        actions_layout = QGridLayout()
        actions_layout.setSpacing(8)
        
        save_settings_btn = QPushButton("üíæ L∆∞u c√†i ƒë·∫∑t")
        save_settings_btn.clicked.connect(self.save_settings)
        actions_layout.addWidget(save_settings_btn, 0, 0)
        
        check_api_btn = QPushButton("üîç Ki·ªÉm tra API")
        check_api_btn.clicked.connect(self.check_api_status)
        actions_layout.addWidget(check_api_btn, 0, 1)
        
        refresh_providers_btn = QPushButton("üîÑ L√†m m·ªõi")
        refresh_providers_btn.clicked.connect(self.refresh_providers)
        actions_layout.addWidget(refresh_providers_btn, 1, 0, 1, 2)
        
        actions_group.setLayout(actions_layout)
        layout.addWidget(actions_group)
        
        # Th√™m stretch ƒë·ªÉ ƒë·∫©y n·ªôi dung l√™n tr√™n
        layout.addStretch()
        
        scroll.setWidget(content_widget)
        
        # Layout ch√≠nh c·ªßa tab
        tab_layout = QVBoxLayout()
        tab_layout.setContentsMargins(0, 0, 0, 0)
        tab_layout.addWidget(scroll)
        tab.setLayout(tab_layout)
        
        self.tabs.addTab(tab, "‚öôÔ∏è C√†i ƒë·∫∑t")
        
        # Load c√†i ƒë·∫∑t hi·ªán t·∫°i t·ª´ file config.env
        self.load_current_settings()
        
        # Update API status when settings change (safe call)
        self.update_api_status_indicator()
    
    def start_video_generation(self):
        """B·∫Øt ƒë·∫ßu t·∫°o video"""
        prompt = self.prompt_input.toPlainText().strip()
        if not prompt:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p prompt!")
            return
        
        project_name = self.project_name_input.text().strip() or "video_project"
        
        # L·∫•y preset hi·ªáu ·ª©ng
        preset_key = self.effects_preset_combo.currentData()
        if preset_key:
            effects = EffectsPresets.get_preset_by_name(preset_key)
        else:
            # Fallback to manual settings
            effects = {
                "zoom": self.zoom_checkbox.isChecked(),
                "transitions": {"crossfade": True} if self.transitions_checkbox.isChecked() else None
            }
        
        # Disable n√∫t v√† hi·ªán progress
        self.generate_video_btn.setEnabled(False)
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 8)
        
        # Ki·ªÉm tra ch·∫ø ƒë·ªô ·∫£nh th·ªß c√¥ng
        use_custom_images = self.manual_images_radio.isChecked()
        custom_images_folder = getattr(self, 'selected_images_folder', None) if use_custom_images else None
        
        if use_custom_images and not custom_images_folder:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ch·ª©a ·∫£nh!")
            return
        
        # L·∫•y th√¥ng tin gi·ªçng ƒë·ªçc v√† th∆∞ m·ª•c
        voice_name = self.voice_combo.currentText().split(' ')[0]  # L·∫•y t√™n gi·ªçng (vd: vi-VN-Standard-A)
        project_folder = self.project_folder_input.text() or None
        
        # T·∫°o thread
        self.generation_thread = VideoGenerationThread(
            prompt, project_name, effects, use_custom_images, custom_images_folder,
            voice_name, project_folder
        )
        self.generation_thread.progress_updated.connect(self.update_progress)
        self.generation_thread.finished.connect(self.generation_finished)
        self.generation_thread.start()
    
    def update_progress(self, step, message):
        """C·∫≠p nh·∫≠t progress"""
        self.progress_group.setVisible(True)
        self.progress_bar.setVisible(True)
        self.progress_label.setVisible(True)
        self.progress_bar.setValue(step)
        self.progress_label.setText(message)
    
    def generation_finished(self, result):
        """Ho√†n th√†nh t·∫°o video"""
        self.generate_video_btn.setEnabled(True)
        self.progress_bar.setVisible(False)
        
        if result["success"]:
            self.progress_label.setText(f"Ho√†n th√†nh! Video: {result['final_video_path']}")
            QMessageBox.information(self, "Th√†nh c√¥ng", 
                                  f"Video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!\nProject: {result['project_id']}\nƒê∆∞·ªùng d·∫´n: {result['final_video_path']}")
            self.refresh_projects()
        else:
            self.progress_label.setText(f"L·ªói: {result['error']}")
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫°o video:\n{result['error']}")
    
    def refresh_projects(self):
        """L√†m m·ªõi danh s√°ch projects"""
        self.projects_list.clear()
        result = self.pipeline.project_manager.list_projects()
        if result["success"]:
            for project in result["projects"]:
                item_text = f"{project['name']} ({project['status']}) - {project['created_at'][:10]}"
                self.projects_list.addItem(item_text)
                # L∆∞u project_id v√†o item
                item = self.projects_list.item(self.projects_list.count() - 1)
                item.setData(1, project['id'])
    
    def load_project_details(self, item):
        """Load chi ti·∫øt project"""
        project_id = item.data(1)
        self.current_project_id = project_id
        
        result = self.pipeline.project_manager.load_project(project_id)
        if result["success"]:
            data = result["data"]
            details = f"""
Project: {data['name']}
ID: {data['id']}
Prompt: {data['prompt']}
Status: {data['status']}
Segments: {len(data['segments'])}
Created: {data['created_at']}
            """
            self.project_details.setText(details.strip())
    
    def open_project_folder(self):
        """M·ªü th∆∞ m·ª•c project"""
        if not self.current_project_id:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng ch·ªçn project!")
            return
        
        project_path = self.pipeline.project_manager.get_project_path(self.current_project_id)
        os.system(f"open '{project_path}'" if sys.platform == "darwin" else f"explorer '{project_path}'")
    
    def delete_project(self):
        """X√≥a project"""
        if not self.current_project_id:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng ch·ªçn project!")
            return
        
        reply = QMessageBox.question(self, "X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a project n√†y?")
        if reply == QMessageBox.Yes:
            result = self.pipeline.project_manager.delete_project(self.current_project_id)
            if result["success"]:
                QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ x√≥a project!")
                self.refresh_projects()
                self.project_details.clear()
                self.current_project_id = None
            else:
                QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a: {result['error']}")
    
    def save_settings(self):
        """L∆∞u c√†i ƒë·∫∑t"""
        try:
            # ƒê·ªçc file config.env hi·ªán t·∫°i
            config_path = 'config.env'
            config_data = {}
            
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if '=' in line and not line.startswith('#'):
                            key, value = line.split('=', 1)
                            config_data[key.strip()] = value.strip()
            
            # C·∫≠p nh·∫≠t API keys t·ª´ UI
            if self.openai_key_input.text().strip():
                config_data['OPENAI_API_KEY'] = self.openai_key_input.text().strip()
            if self.claude_key_input.text().strip():
                config_data['CLAUDE_API_KEY'] = self.claude_key_input.text().strip()
            if self.deepseek_key_input.text().strip():
                config_data['DEEPSEEK_API_KEY'] = self.deepseek_key_input.text().strip()
            if self.midjourney_key_input.text().strip():
                config_data['MIDJOURNEY_API_KEY'] = self.midjourney_key_input.text().strip()
            if self.stability_key_input.text().strip():
                config_data['STABILITY_AI_KEY'] = self.stability_key_input.text().strip()
            if self.elevenlabs_key_input.text().strip():
                config_data['ELEVENLABS_API_KEY'] = self.elevenlabs_key_input.text().strip()
            if self.google_tts_key_input.text().strip():
                config_data['GOOGLE_TTS_API_KEY'] = self.google_tts_key_input.text().strip()
            if self.azure_speech_key_input.text().strip():
                config_data['AZURE_SPEECH_KEY'] = self.azure_speech_key_input.text().strip()
            
            # C·∫≠p nh·∫≠t provider preferences
            config_data['CONTENT_PROVIDER'] = self.content_provider_combo.currentText()
            config_data['IMAGE_PROVIDER'] = self.image_provider_combo.currentText()
            config_data['TTS_PROVIDER'] = self.tts_provider_combo.currentText()
            
            # C·∫≠p nh·∫≠t video settings
            config_data['VIDEO_RESOLUTION'] = self.resolution_combo.currentText()
            config_data['VIDEO_FPS'] = str(self.fps_spinbox.value())
            
            # Ghi l·∫°i file config.env
            with open(config_path, 'w', encoding='utf-8') as f:
                f.write("# ===========================================\n")
                f.write("# API KEYS - Auto-generated from settings\n")
                f.write("# ===========================================\n\n")
                
                f.write("# AI Content Generation\n")
                f.write(f"OPENAI_API_KEY={config_data.get('OPENAI_API_KEY', '')}\n")
                f.write(f"CLAUDE_API_KEY={config_data.get('CLAUDE_API_KEY', '')}\n")
                f.write(f"DEEPSEEK_API_KEY={config_data.get('DEEPSEEK_API_KEY', '')}\n\n")
                
                f.write("# Image Generation\n")
                f.write(f"MIDJOURNEY_API_KEY={config_data.get('MIDJOURNEY_API_KEY', '')}\n")
                f.write(f"STABILITY_AI_KEY={config_data.get('STABILITY_AI_KEY', '')}\n\n")
                
                f.write("# Text-to-Speech\n")
                f.write(f"ELEVENLABS_API_KEY={config_data.get('ELEVENLABS_API_KEY', '')}\n")
                f.write(f"GOOGLE_TTS_API_KEY={config_data.get('GOOGLE_TTS_API_KEY', '')}\n")
                f.write(f"AZURE_SPEECH_KEY={config_data.get('AZURE_SPEECH_KEY', '')}\n")
                f.write(f"AZURE_SPEECH_REGION={config_data.get('AZURE_SPEECH_REGION', 'eastus')}\n\n")
                
                f.write("# ===========================================\n")
                f.write("# PROVIDER PREFERENCES\n")
                f.write("# ===========================================\n")
                f.write(f"CONTENT_PROVIDER={config_data.get('CONTENT_PROVIDER', 'OpenAI GPT-4')}\n")
                f.write(f"IMAGE_PROVIDER={config_data.get('IMAGE_PROVIDER', 'DALL-E (OpenAI)')}\n")
                f.write(f"TTS_PROVIDER={config_data.get('TTS_PROVIDER', 'Google TTS (Free)')}\n\n")
                
                f.write("# ===========================================\n")
                f.write("# SETTINGS\n")
                f.write("# ===========================================\n")
                f.write(f"DEFAULT_VOICE=alloy\n")
                f.write(f"DEFAULT_LANGUAGE=vi\n")
                f.write(f"VIDEO_RESOLUTION={config_data.get('VIDEO_RESOLUTION', '1920x1080')}\n")
                f.write(f"VIDEO_FPS={config_data.get('VIDEO_FPS', '25')}\n")
            
            # Reload API manager ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi
            self.api_manager = APIManager()
            self.refresh_providers()
            
            QMessageBox.information(self, "Th√†nh c√¥ng", "C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!\nAPI keys ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√†o config.env")
            
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u c√†i ƒë·∫∑t:\n{str(e)}")
    
    def load_current_settings(self):
        """Load c√†i ƒë·∫∑t hi·ªán t·∫°i t·ª´ file config.env"""
        try:
            config_path = 'config.env'
            if not os.path.exists(config_path):
                return
            
            with open(config_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if '=' in line and not line.startswith('#'):
                        key, value = line.split('=', 1)
                        key = key.strip()
                        value = value.strip()
                        
                        # Load API keys
                        if key == 'OPENAI_API_KEY' and value and value != 'your_openai_api_key_here':
                            self.openai_key_input.setText(value)
                        elif key == 'CLAUDE_API_KEY' and value and value != 'your_claude_api_key_here':
                            self.claude_key_input.setText(value)
                        elif key == 'DEEPSEEK_API_KEY' and value and value != 'your_deepseek_api_key_here':
                            self.deepseek_key_input.setText(value)
                        elif key == 'MIDJOURNEY_API_KEY' and value and value != 'your_midjourney_api_key_here':
                            self.midjourney_key_input.setText(value)
                        elif key == 'STABILITY_AI_KEY' and value and value != 'your_stability_ai_key_here':
                            self.stability_key_input.setText(value)
                        elif key == 'ELEVENLABS_API_KEY' and value and value != 'your_elevenlabs_api_key_here':
                            self.elevenlabs_key_input.setText(value)
                        elif key == 'GOOGLE_TTS_API_KEY' and value and value != 'your_google_tts_api_key_here':
                            self.google_tts_key_input.setText(value)
                        elif key == 'AZURE_SPEECH_KEY' and value and value != 'your_azure_speech_key_here':
                            self.azure_speech_key_input.setText(value)
                        
                        # Load provider preferences
                        elif key == 'CONTENT_PROVIDER' and value:
                            index = self.content_provider_combo.findText(value)
                            if index >= 0:
                                self.content_provider_combo.setCurrentIndex(index)
                        elif key == 'IMAGE_PROVIDER' and value:
                            index = self.image_provider_combo.findText(value)
                            if index >= 0:
                                self.image_provider_combo.setCurrentIndex(index)
                        elif key == 'TTS_PROVIDER' and value:
                            index = self.tts_provider_combo.findText(value)
                            if index >= 0:
                                self.tts_provider_combo.setCurrentIndex(index)
                        
                        # Load video settings
                        elif key == 'VIDEO_RESOLUTION' and value:
                            index = self.resolution_combo.findText(value)
                            if index >= 0:
                                self.resolution_combo.setCurrentIndex(index)
                        elif key == 'VIDEO_FPS' and value:
                            try:
                                fps = int(value)
                                self.fps_spinbox.setValue(fps)
                            except ValueError:
                                pass
        except Exception as e:
            print(f"L·ªói load c√†i ƒë·∫∑t: {str(e)}")
    
    def load_prompt_suggestions(self):
        """Load prompt suggestions theo danh m·ª•c"""
        self.prompt_suggestions_list.clear()
        self.prompt_suggestions_list.addItem("-- Ch·ªçn prompt m·∫´u --")
        
        current_data = self.category_combo.currentData()
        if current_data:
            categories = PromptTemplates.get_all_categories()
            if current_data in categories:
                prompts = categories[current_data]["prompts"]
                for prompt in prompts:
                    # Truncate long prompts for display
                    display_text = prompt[:80] + "..." if len(prompt) > 80 else prompt
                    self.prompt_suggestions_list.addItem(display_text, prompt)
    
    def use_suggested_prompt(self):
        """S·ª≠ d·ª•ng prompt ƒë∆∞·ª£c g·ª£i √Ω"""
        current_data = self.prompt_suggestions_list.currentData()
        if current_data:
            self.prompt_input.setPlainText(current_data)
    
    def get_random_prompt(self):
        """L·∫•y prompt ng·∫´u nhi√™n"""
        random_prompt = PromptTemplates.get_random_prompt()
        self.prompt_input.setPlainText(random_prompt)
    
    def toggle_image_mode(self):
        """Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô t·∫°o ·∫£nh"""
        manual_mode = self.manual_images_radio.isChecked()
        self.select_images_btn.setEnabled(manual_mode)
        
        if manual_mode:
            self.auto_generate_radio.setChecked(False)
        else:
            self.auto_generate_radio.setChecked(True)
    
    def select_images_folder(self):
        """Ch·ªçn th∆∞ m·ª•c ch·ª©a ·∫£nh"""
        folder_path = QFileDialog.getExistingDirectory(
            self, "Ch·ªçn th∆∞ m·ª•c ch·ª©a ·∫£nh", ""
        )
        
        if folder_path:
            # Ki·ªÉm tra ·∫£nh trong th∆∞ m·ª•c
            image_files = self.get_image_files_in_folder(folder_path)
            
            if image_files:
                self.selected_images_folder = folder_path
                self.selected_images_label.setText(
                    f"ƒê√£ ch·ªçn: {folder_path} ({len(image_files)} ·∫£nh)"
                )
                self.selected_images_label.setStyleSheet("color: green;")
            else:
                QMessageBox.warning(
                    self, "C·∫£nh b√°o", 
                    "Th∆∞ m·ª•c kh√¥ng ch·ª©a ·∫£nh h·ª£p l·ªá!\nH·ªó tr·ª£: .jpg, .jpeg, .png, .bmp, .gif, .webp"
                )
    
    def get_image_files_in_folder(self, folder_path):
        """L·∫•y danh s√°ch file ·∫£nh trong th∆∞ m·ª•c"""
        valid_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.gif', '.webp']
        image_files = []
        
        try:
            for file in os.listdir(folder_path):
                if any(file.lower().endswith(ext) for ext in valid_extensions):
                    image_files.append(os.path.join(folder_path, file))
        except Exception:
            pass
        
        return sorted(image_files)
    
    def check_api_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i t·∫•t c·∫£ API"""
        status = self.api_manager.get_provider_status()
        
        status_text = "üîç TR·∫†NG TH√ÅI API:\n\n"
        
        # Content providers
        status_text += "üìù AI Sinh n·ªôi dung:\n"
        for provider, available in status['content_providers'].items():
            icon = "‚úÖ" if available else "‚ùå"
            status_text += f"  {icon} {provider}\n"
        
        # Image providers
        status_text += "\nüé® AI T·∫°o ·∫£nh:\n"
        for provider, available in status['image_providers'].items():
            icon = "‚úÖ" if available else "‚ùå"
            status_text += f"  {icon} {provider}\n"
        
        # TTS providers
        status_text += "\nüé§ Text-to-Speech:\n"
        for provider, available in status['tts_providers'].items():
            icon = "‚úÖ" if available else "‚ùå"
            status_text += f"  {icon} {provider}\n"
        
        QMessageBox.information(self, "Tr·∫°ng th√°i API", status_text)
    
    def refresh_providers(self):
        """L√†m m·ªõi danh s√°ch providers"""
        # Reload API manager
        self.api_manager = APIManager()
        
        # Update combo boxes
        self.content_provider_combo.clear()
        self.content_provider_combo.addItems(self.api_manager.get_available_content_providers())
        
        self.image_provider_combo.clear()
        self.image_provider_combo.addItems(self.api_manager.get_available_image_providers())
        
        self.tts_provider_combo.clear()
        self.tts_provider_combo.addItems(self.api_manager.get_available_tts_providers())
        
        QMessageBox.information(self, "Th√¥ng b√°o", "ƒê√£ l√†m m·ªõi danh s√°ch providers!")
        
        # Update API status indicator
        self.update_api_status_indicator()
    
    def generate_story_only(self):
        """Ch·ªâ t·∫°o c√¢u chuy·ªán/k·ªãch b·∫£n t·ª´ prompt"""
        prompt = self.prompt_input.toPlainText().strip()
        if not prompt:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p prompt!")
            return
        
        # Disable n√∫t ƒë·ªÉ tr√°nh spam
        self.generate_story_btn.setEnabled(False)
        self.progress_group.setVisible(True)
        self.progress_label.setVisible(True)
        self.progress_label.setText("ƒêang t·∫°o c√¢u chuy·ªán...")
        
        try:
            # L·∫•y provider ƒë∆∞·ª£c ch·ªçn
            content_provider = self.content_provider_combo.currentText()
            
            # T·∫°o c√¢u chuy·ªán
            result = self.pipeline.content_gen.generate_script_from_prompt(prompt, provider=content_provider)
            
            if "error" in result:
                QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫°o c√¢u chuy·ªán:\n{result['error']}")
                self.progress_label.setText("L·ªói t·∫°o c√¢u chuy·ªán")
            else:
                # Store script data for audio generation
                self.current_script_data = result
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi format m·ªõi
                story_text = "üé¨ C√ÇU CHUY·ªÜN ƒê√É T·∫†O:\n\n"
                
                # Show characters if available
                characters = result.get("characters", [])
                if characters:
                    story_text += "üé≠ NH√ÇN V·∫¨T:\n"
                    for char in characters:
                        story_text += f"‚Ä¢ {char.get('name', char['id'])} ({char.get('gender', 'neutral')}) - {char.get('suggested_voice', 'N/A')}\n"
                    story_text += "\n"
                
                for i, segment in enumerate(result["segments"], 1):
                    story_text += f"üìù ƒêO·∫†N {i} ({segment.get('duration', 10)}s):\n"
                    story_text += f"K·ªãch b·∫£n: {segment.get('script', '')}\n"
                    
                    # Show dialogues if available
                    dialogues = segment.get('dialogues', [])
                    if dialogues:
                        story_text += "Dialogues:\n"
                        for dialogue in dialogues:
                            speaker = dialogue.get('speaker', 'unknown')
                            text = dialogue.get('text', '')
                            emotion = dialogue.get('emotion', 'neutral')
                            story_text += f"  - {speaker} ({emotion}): {text}\n"
                    else:
                        # Fallback for old format
                        story_text += f"L·ªùi tho·∫°i: {segment.get('narration', '')}\n"
                    
                    story_text += f"M√¥ t·∫£ ·∫£nh: {segment.get('image_prompt', '')}\n"
                    story_text += "-" * 50 + "\n\n"
                
                # Enable audio generation button
                self.generate_audio_btn.setEnabled(True)
                
                # T·∫°o dialog hi·ªÉn th·ªã
                dialog = QDialog(self)
                dialog.setWindowTitle(f"C√¢u chuy·ªán t·ª´ prompt - {content_provider}")
                dialog.setModal(True)
                dialog.resize(800, 600)
                
                layout = QVBoxLayout()
                dialog.setLayout(layout)
                
                # Text area hi·ªÉn th·ªã story
                story_display = QTextEdit()
                story_display.setPlainText(story_text)
                story_display.setReadOnly(True)
                layout.addWidget(story_display)
                
                # N√∫t actions
                buttons_layout = QHBoxLayout()
                
                copy_btn = QPushButton("üìã Copy")
                copy_btn.clicked.connect(lambda: self.copy_to_clipboard(story_text))
                buttons_layout.addWidget(copy_btn)
                
                save_btn = QPushButton("üíæ L∆∞u v√†o file")
                save_btn.clicked.connect(lambda: self.save_story_to_file(story_text, prompt))
                buttons_layout.addWidget(save_btn)
                
                close_btn = QPushButton("‚ùå ƒê√≥ng")
                close_btn.clicked.connect(dialog.close)
                buttons_layout.addWidget(close_btn)
                
                layout.addLayout(buttons_layout)
                
                dialog.exec_()
                self.progress_label.setText("ƒê√£ t·∫°o c√¢u chuy·ªán th√†nh c√¥ng!")
                
                # Hi·ªÉn th·ªã preview ngay trong ·ª©ng d·ª•ng
                preview_text = ""
                for i, segment in enumerate(result["segments"], 1):
                    # Handle both old and new format
                    narration = segment.get('narration', '')
                    if not narration and 'dialogues' in segment:
                        # New format with dialogues
                        narration = " ".join([d.get('text', '') for d in segment['dialogues']])
                    preview_text += f"ƒêO·∫†N {i}: {narration}\n"
                self.content_preview.setPlainText(preview_text)
                
                # Show progress group
                self.progress_group.setVisible(True)
                
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói kh√¥ng x√°c ƒë·ªãnh:\n{str(e)}")
            self.progress_label.setText("L·ªói t·∫°o c√¢u chuy·ªán")
        finally:
            self.generate_story_btn.setEnabled(True)
    
    def copy_to_clipboard(self, text):
        """Copy text v√†o clipboard"""
        try:
            from PySide6.QtGui import QClipboard, QGuiApplication
            clipboard = QGuiApplication.clipboard()
            clipboard.setText(text)
            QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ copy v√†o clipboard!")
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ copy: {str(e)}")
    
    def save_story_to_file(self, story_text, prompt):
        """L∆∞u c√¢u chuy·ªán v√†o file"""
        try:
            from PySide6.QtWidgets import QFileDialog
            from datetime import datetime
            
            # T·∫°o t√™n file m·∫∑c ƒë·ªãnh
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            default_filename = f"story_{timestamp}.txt"
            
            # M·ªü dialog l∆∞u file
            file_path, _ = QFileDialog.getSaveFileName(
                self, "L∆∞u c√¢u chuy·ªán", default_filename, 
                "Text Files (*.txt);;All Files (*)"
            )
            
            if file_path:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(f"PROMPT G·ªêC:\n{prompt}\n\n")
                    f.write("=" * 60 + "\n\n")
                    f.write(story_text)
                    
                QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ l∆∞u c√¢u chuy·ªán v√†o:\n{file_path}")
                
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u file:\n{str(e)}")
    
    def select_project_folder(self):
        """Ch·ªçn th∆∞ m·ª•c ƒë·ªÉ l∆∞u d·ª± √°n"""
        folder_path = QFileDialog.getExistingDirectory(
            self, "Ch·ªçn th∆∞ m·ª•c l∆∞u d·ª± √°n", "./projects"
        )
        
        if folder_path:
            self.project_folder_input.setText(folder_path)
            self.progress_label.setText(f"ƒê√£ ch·ªçn th∆∞ m·ª•c: {folder_path}")
    
    def generate_audio_only(self):
        """T·∫°o audio t·ª´ script data ƒë√£ c√≥ v·ªõi character voice selection"""
        if not self.current_script_data:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng t·∫°o c√¢u chuy·ªán tr∆∞·ªõc!")
            return
        
        characters = self.current_script_data.get('characters', [])
        if not characters:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n v·∫≠t!")
            return
        
        # Import voice generator
        from tts.voice_generator import VoiceGenerator
        voice_gen = VoiceGenerator()
        
        # Open character voice dialog
        dialog = CharacterVoiceDialog(characters, voice_gen, self)
        if dialog.exec_() == QDialog.Accepted:
            voice_mapping = dialog.get_voice_mapping()
            
            # Disable button during generation
            self.generate_audio_btn.setEnabled(False)
            self.generate_audio_btn.setText("‚è≥ ƒêang t·∫°o...")
            self.progress_label.setText("ƒêang t·∫°o audio...")
            
            try:
                # Get project folder
                project_folder = self.project_folder_input.text() or "./projects"
                project_name = self.project_name_input.text() or "audio_project"
                
                # Create audio output directory
                audio_output_dir = os.path.join(project_folder, project_name, "audio")
                os.makedirs(audio_output_dir, exist_ok=True)
                
                # Generate audio by characters
                result = voice_gen.generate_audio_by_characters(
                    self.current_script_data, 
                    audio_output_dir, 
                    voice_mapping
                )
                
                if result["success"]:
                    # Store paths for buttons
                    self.last_audio_output_dir = result["output_dir"]
                    self.last_final_audio_path = result["final_audio_path"]
                    
                    # Enable audio control buttons
                    self.open_audio_folder_btn.setEnabled(True)
                    self.play_final_audio_btn.setEnabled(True)
                    
                    # Show success message
                    message = f"‚úÖ ƒê√£ t·∫°o audio th√†nh c√¥ng!\n\n"
                    message += f"üìÅ Th∆∞ m·ª•c: {result['output_dir']}\n"
                    message += f"üéµ File cu·ªëi: {os.path.basename(result['final_audio_path'])}\n\n"
                    message += f"üìä Chi ti·∫øt:\n"
                    for character, files in result["character_audio_files"].items():
                        message += f"  ‚Ä¢ {character}: {len(files)} file(s)\n"
                    
                    QMessageBox.information(self, "Th√†nh c√¥ng", message)
                    self.progress_label.setText("ƒê√£ t·∫°o audio th√†nh c√¥ng!")
                    
                else:
                    QMessageBox.critical(self, "L·ªói", f"L·ªói t·∫°o audio:\n{result.get('error', 'Unknown error')}")
                    self.progress_label.setText("L·ªói t·∫°o audio")
                    
            except Exception as e:
                QMessageBox.critical(self, "L·ªói", f"L·ªói kh√¥ng x√°c ƒë·ªãnh:\n{str(e)}")
                self.progress_label.setText("L·ªói t·∫°o audio")
            finally:
                self.generate_audio_btn.setEnabled(True)
                self.generate_audio_btn.setText("üéµ T·∫°o Audio")
    
    def open_audio_folder(self):
        """M·ªü th∆∞ m·ª•c ch·ª©a audio ƒë√£ t·∫°o"""
        if self.last_audio_output_dir and os.path.exists(self.last_audio_output_dir):
            # Cross-platform folder opening
            if platform.system() == "Darwin":  # macOS
                subprocess.Popen(['open', self.last_audio_output_dir])
            elif platform.system() == "Windows":
                subprocess.Popen(['explorer', self.last_audio_output_dir])
            else:  # Linux
                subprocess.Popen(['xdg-open', self.last_audio_output_dir])
        else:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c audio!")
    
    def play_final_audio(self):
        """Ph√°t audio ho√†n ch·ªânh"""
        if self.last_final_audio_path and os.path.exists(self.last_final_audio_path):
            # Cross-platform audio playing
            if platform.system() == "Darwin":  # macOS
                subprocess.Popen(['open', self.last_final_audio_path])
            elif platform.system() == "Windows":
                os.system(f'start "" "{self.last_final_audio_path}"')
            else:  # Linux
                subprocess.Popen(['xdg-open', self.last_final_audio_path])
        else:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Kh√¥ng t√¨m th·∫•y file audio!")
    
    def show_manual_voice_setup(self):
        """Hi·ªÉn th·ªã dialog c·∫•u h√¨nh gi·ªçng ƒë·ªçc th·ªß c√¥ng"""
        from tts.voice_generator import VoiceGenerator
        voice_gen = VoiceGenerator()
        
        dialog = ManualVoiceSetupDialog(voice_gen, self)
        if dialog.exec_() == QDialog.Accepted:
            characters, voice_mapping = dialog.get_characters_and_mapping()
            
            # Create manual script data
            manual_script_data = {
                "segments": [
                    {
                        "id": 1,
                        "script": "Audio ƒë∆∞·ª£c t·∫°o t·ª´ c·∫•u h√¨nh th·ªß c√¥ng",
                        "image_prompt": "H√¨nh ·∫£nh minh h·ªça",
                        "dialogues": [
                            {
                                "speaker": char['id'],
                                "text": f"Xin ch√†o, t√¥i l√† {char['name']}. ƒê√¢y l√† gi·ªçng n√≥i {char['suggested_voice']} c·ªßa t√¥i.",
                                "emotion": "friendly"
                            }
                            for char in characters
                        ],
                        "duration": 10
                    }
                ],
                "characters": characters
            }
            
            # Generate audio immediately
            self.current_script_data = manual_script_data
            self.generate_audio_with_mapping(voice_mapping)
    
    def generate_audio_with_mapping(self, voice_mapping):
        """T·∫°o audio v·ªõi voice mapping ƒë√£ c√≥"""
        if not self.current_script_data:
            return
        
        # Import voice generator
        from tts.voice_generator import VoiceGenerator
        voice_gen = VoiceGenerator()
        
        # Disable button during generation
        self.generate_audio_btn.setEnabled(False)
        self.generate_audio_btn.setText("‚è≥ ƒêang t·∫°o...")
        self.progress_label.setText("ƒêang t·∫°o audio...")
        
        try:
            # Get project folder
            project_folder = self.project_folder_input.text() or "./projects"
            project_name = self.project_name_input.text() or "manual_audio_project"
            
            # Create audio output directory
            audio_output_dir = os.path.join(project_folder, project_name, "audio")
            os.makedirs(audio_output_dir, exist_ok=True)
            
            # Generate audio by characters
            result = voice_gen.generate_audio_by_characters(
                self.current_script_data, 
                audio_output_dir, 
                voice_mapping
            )
            
            if result["success"]:
                # Store paths for buttons
                self.last_audio_output_dir = result["output_dir"]
                self.last_final_audio_path = result["final_audio_path"]
                
                # Enable audio control buttons
                self.open_audio_folder_btn.setEnabled(True)
                self.play_final_audio_btn.setEnabled(True)
                
                # Show success message
                message = f"‚úÖ ƒê√£ t·∫°o audio th√†nh c√¥ng!\n\n"
                message += f"üìÅ Th∆∞ m·ª•c: {result['output_dir']}\n"
                message += f"üéµ File cu·ªëi: {os.path.basename(result['final_audio_path'])}\n\n"
                message += f"üìä Chi ti·∫øt:\n"
                for character, files in result["character_audio_files"].items():
                    message += f"  ‚Ä¢ {character}: {len(files)} file(s)\n"
                
                QMessageBox.information(self, "Th√†nh c√¥ng", message)
                self.progress_label.setText("ƒê√£ t·∫°o audio th√†nh c√¥ng!")
                
            else:
                QMessageBox.critical(self, "L·ªói", f"L·ªói t·∫°o audio:\n{result.get('error', 'Unknown error')}")
                self.progress_label.setText("L·ªói t·∫°o audio")
                
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói kh√¥ng x√°c ƒë·ªãnh:\n{str(e)}")
            self.progress_label.setText("L·ªói t·∫°o audio")
        finally:
            self.generate_audio_btn.setEnabled(True)
            self.generate_audio_btn.setText("üéµ T·∫°o Audio")
    
    def show_chatterbox_device_info(self):
        """Hi·ªÉn th·ªã th√¥ng tin device c·ªßa Chatterbox TTS"""
        try:
            device_info = self.voice_generator.get_chatterbox_device_info()
            providers = self.voice_generator.get_available_tts_providers()
            
            # Find Chatterbox provider info
            chatterbox_info = None
            for provider in providers:
                if provider['id'] == 'chatterbox':
                    chatterbox_info = provider
                    break
            
            # Create info message
            message = "ü§ñ **Chatterbox TTS Device Information**\n\n"
            
            if device_info.get('available'):
                message += f"‚úÖ **Status**: {device_info.get('initialized', False) and 'Initialized' or 'Available but not initialized'}\n"
                message += f"üì± **Device**: {device_info.get('device_name', 'Unknown')}\n"
                message += f"üîß **Device Type**: {device_info.get('device', 'Unknown')}\n\n"
                
                # GPU specific info
                if 'cuda_version' in device_info:
                    message += f"üéØ **CUDA Version**: {device_info['cuda_version']}\n"
                    message += f"üíæ **GPU Memory**: {device_info.get('gpu_memory_total', 'Unknown')} GB total\n"
                    message += f"üü¢ **Available Memory**: {device_info.get('gpu_memory_available', 'Unknown')} GB\n\n"
                
                # Provider features
                if chatterbox_info:
                    message += f"üåç **Languages**: {', '.join(chatterbox_info['languages'])}\n"
                    message += f"‚ú® **Features**:\n"
                    for feature in chatterbox_info['features']:
                        message += f"   ‚Ä¢ {feature}\n"
                
                # Memory usage if available
                memory_info = self.voice_generator.chatterbox_provider.get_memory_usage() if self.voice_generator.chatterbox_provider else {}
                if memory_info:
                    message += f"\nüìä **Current Memory Usage**:\n"
                    if 'gpu_allocated' in memory_info:
                        message += f"   ‚Ä¢ GPU Allocated: {memory_info['gpu_allocated']} MB\n"
                        message += f"   ‚Ä¢ GPU Cached: {memory_info['gpu_cached']} MB\n"
                    if 'cpu_memory_mb' in memory_info:
                        message += f"   ‚Ä¢ CPU Memory: {memory_info['cpu_memory_mb']} MB ({memory_info.get('cpu_memory_percent', 0):.1f}%)\n"
            else:
                message += f"‚ùå **Status**: Not available\n"
                message += f"üö´ **Reason**: {device_info.get('error', 'Unknown error')}\n\n"
                message += f"üí° **Possible solutions**:\n"
                message += f"   ‚Ä¢ Install PyTorch with CUDA support for GPU acceleration\n"
                message += f"   ‚Ä¢ Update graphics drivers\n"
                message += f"   ‚Ä¢ Ensure sufficient memory available\n"
            
            # Show dialog
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("Chatterbox TTS Device Info")
            msg_box.setText(message)
            msg_box.setIcon(QMessageBox.Information)
            msg_box.exec_()
            
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin device:\n{str(e)}")
    
    def clear_chatterbox_cache(self):
        """X√≥a cache c·ªßa Chatterbox TTS"""
        try:
            if self.voice_generator.chatterbox_provider:
                # Get memory info before clearing
                memory_before = self.voice_generator.chatterbox_provider.get_memory_usage()
                
                # Clear cache
                self.voice_generator.cleanup_chatterbox()
                
                # Get memory info after clearing
                memory_after = self.voice_generator.chatterbox_provider.get_memory_usage() if self.voice_generator.chatterbox_provider else {}
                
                # Show result
                message = "üßπ **Chatterbox TTS Cache Cleared**\n\n"
                
                if memory_before and memory_after:
                    message += f"**Memory Usage Before/After**:\n"
                    if 'gpu_allocated' in memory_before:
                        gpu_freed = memory_before.get('gpu_allocated', 0) - memory_after.get('gpu_allocated', 0)
                        message += f"   ‚Ä¢ GPU: {memory_before['gpu_allocated']} ‚Üí {memory_after['gpu_allocated']} MB (freed: {gpu_freed} MB)\n"
                    if 'cpu_memory_mb' in memory_before:
                        cpu_freed = memory_before.get('cpu_memory_mb', 0) - memory_after.get('cpu_memory_mb', 0)
                        message += f"   ‚Ä¢ CPU: {memory_before['cpu_memory_mb']} ‚Üí {memory_after['cpu_memory_mb']} MB (freed: {cpu_freed} MB)\n"
                else:
                    message += "‚úÖ Voice cloning cache cleared\n"
                    message += "‚úÖ GPU cache cleared (if applicable)\n"
                    message += "‚úÖ Memory resources freed\n"
                
                QMessageBox.information(self, "Th√†nh c√¥ng", message)
            else:
                QMessageBox.warning(self, "C·∫£nh b√°o", "Chatterbox TTS ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!")
                
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a cache:\n{str(e)}") 