#!/usr/bin/env python3
"""
üßπ PROJECT CLEANUP SCRIPT
========================

Script t·ª± ƒë·ªông d·ªçn d·∫πp project ƒë·ªÉ gi·∫£m dung l∆∞·ª£ng t·ª´ 20GB xu·ªëng d∆∞·ªõi 500MB:
1. X√≥a virtual environments (GI·ªÆ L·∫†I .venv_clean)
2. X√≥a __pycache__ folders v√† .pyc files  
3. X√≥a test scripts kh√¥ng c·∫ßn thi·∫øt
4. X√≥a output files v√† temporary files
5. X√≥a node_modules
6. D·ªçn d·∫πp c√°c file logs v√† debug files

C·∫¢NH B√ÅO: Script n√†y s·∫Ω x√≥a nhi·ªÅu file! H√£y backup tr∆∞·ªõc khi ch·∫°y.
"""

import os
import shutil
import glob
from pathlib import Path

def get_folder_size(path):
    """T√≠nh dung l∆∞·ª£ng folder (MB)"""
    total_size = 0
    try:
        for dirpath, dirnames, filenames in os.walk(path):
            for f in filenames:
                fp = os.path.join(dirpath, f)
                if os.path.exists(fp):
                    total_size += os.path.getsize(fp)
    except:
        pass
    return total_size / (1024 * 1024)  # Convert to MB

def safe_remove(path):
    """X√≥a file/folder an to√†n"""
    try:
        if os.path.isfile(path):
            os.remove(path)
            return True
        elif os.path.isdir(path):
            shutil.rmtree(path)
            return True
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ x√≥a {path}: {e}")
        return False
    return False

def cleanup_virtual_environments():
    """X√≥a virtual environments - Chi·∫øm nhi·ªÅu dung l∆∞·ª£ng nh·∫•t"""
    print("\nüéØ B∆Ø·ªöC 1: D·ªçn d·∫πp Virtual Environments")
    print("‚ÑπÔ∏è  GI·ªÆ L·∫†I .venv_clean trong th∆∞ m·ª•c tooldiutobe")
    
    venv_folders = [
        ".venv",
        "backend/.venv", 
        "venv",
        "__pycache__"
    ]
    
    total_saved = 0
    for venv in venv_folders:
        if os.path.exists(venv):
            size_mb = get_folder_size(venv)
            if safe_remove(venv):
                print(f"‚úÖ ƒê√£ x√≥a {venv} (ti·∫øt ki·ªám {size_mb:.1f}MB)")
                total_saved += size_mb
            else:
                print(f"‚ùå Kh√¥ng th·ªÉ x√≥a {venv}")
    
    # Th√¥ng b√°o v·ªÅ .venv_clean ƒë∆∞·ª£c gi·ªØ l·∫°i
    if os.path.exists(".venv_clean"):
        size_mb = get_folder_size(".venv_clean")
        print(f"üíæ GI·ªÆ L·∫†I .venv_clean ({size_mb:.1f}MB)")
    
    print(f"üíæ T·ªïng ti·∫øt ki·ªám t·ª´ virtual envs: {total_saved:.1f}MB")
    return total_saved

def cleanup_pycache():
    """X√≥a t·∫•t c·∫£ __pycache__ folders (tr·ª´ trong .venv_clean)"""
    print("\nüéØ B∆Ø·ªöC 2: D·ªçn d·∫πp __pycache__ folders")
    
    count = 0
    total_saved = 0
    
    # T√¨m t·∫•t c·∫£ __pycache__ folders trong project
    for root, dirs, files in os.walk("."):
        # Skip .venv_clean v√† c√°c virtual environments kh√°c
        if any(venv in root for venv in [".venv_clean", ".venv", "venv", "node_modules"]):
            continue
            
        if "__pycache__" in dirs:
            pycache_path = os.path.join(root, "__pycache__")
            size_mb = get_folder_size(pycache_path)
            if safe_remove(pycache_path):
                count += 1
                total_saved += size_mb
    
    # X√≥a .pyc files ri√™ng l·∫ª (tr·ª´ trong .venv_clean)
    pyc_files = glob.glob("**/*.pyc", recursive=True)
    for pyc_file in pyc_files:
        if ".venv_clean" not in pyc_file:
            if safe_remove(pyc_file):
                count += 1
    
    print(f"‚úÖ ƒê√£ x√≥a {count} __pycache__ folders v√† .pyc files (ti·∫øt ki·ªám {total_saved:.1f}MB)")
    return total_saved

def cleanup_test_files():
    """X√≥a test scripts kh√¥ng c·∫ßn thi·∫øt"""
    print("\nüéØ B∆Ø·ªöC 3: D·ªçn d·∫πp Test Scripts")
    
    test_patterns = [
        "test_*.py",
        "debug_*.py", 
        "demo_*.py",
        "*_test.py",
        "ultimate_*.py",
        "improved_*.py",
        "final_*.py",
        "quick_*.py"
    ]
    
    # Exceptions - keep important files
    keep_files = [
        "test_script_inner_voice.py",  # Important test for inner voice
    ]
    
    count = 0
    total_saved = 0
    
    for pattern in test_patterns:
        files = glob.glob(pattern)
        for file in files:
            if file not in keep_files:
                if os.path.exists(file):
                    size_mb = os.path.getsize(file) / (1024 * 1024)
                    if safe_remove(file):
                        count += 1
                        total_saved += size_mb
    
    print(f"‚úÖ ƒê√£ x√≥a {count} test scripts (ti·∫øt ki·ªám {total_saved:.1f}MB)")
    return total_saved

def cleanup_output_files():
    """X√≥a output files v√† temporary files"""
    print("\nüéØ B∆Ø·ªöC 4: D·ªçn d·∫πp Output Files")
    
    output_folders = [
        "voice_studio_output",
        "backend/voice_studio_output", 
        "test_output",
        "test_extended_output",
        "test_script_output",
        "outputs",
        "temp_video"
    ]
    
    output_patterns = [
        "*.mp3",
        "*.wav", 
        "*.mp4",
        "*.avi"
    ]
    
    # Log files to remove
    log_patterns = [
        "*.log",
        "debug_*.txt",
        "generate_log.txt",
        "run.log",
        "backend.log",
        "ffmpeg_errors.log"
    ]
    
    total_saved = 0
    count = 0
    
    # X√≥a output folders
    for folder in output_folders:
        if os.path.exists(folder):
            size_mb = get_folder_size(folder)
            if safe_remove(folder):
                print(f"‚úÖ ƒê√£ x√≥a folder {folder} (ti·∫øt ki·ªám {size_mb:.1f}MB)")
                total_saved += size_mb
                count += 1
    
    # X√≥a scattered output files ·ªü root
    for pattern in output_patterns + log_patterns:
        files = glob.glob(pattern)
        for file in files:
            # Skip important files
            if file in ["requirements.txt", "README.md", "config.env"]:
                continue
            if os.path.exists(file):
                size_mb = os.path.getsize(file) / (1024 * 1024)
                if safe_remove(file):
                    count += 1
                    total_saved += size_mb
    
    print(f"‚úÖ ƒê√£ x√≥a {count} output files (ti·∫øt ki·ªám {total_saved:.1f}MB)")
    return total_saved

def cleanup_node_modules():
    """X√≥a node_modules folders"""
    print("\nüéØ B∆Ø·ªöC 5: D·ªçn d·∫πp Node Modules")
    
    total_saved = 0
    count = 0
    
    # T√¨m t·∫•t c·∫£ node_modules
    for root, dirs, files in os.walk("."):
        # Skip .venv_clean
        if ".venv_clean" in root:
            continue
            
        if "node_modules" in dirs:
            node_modules_path = os.path.join(root, "node_modules")
            size_mb = get_folder_size(node_modules_path)
            if safe_remove(node_modules_path):
                print(f"‚úÖ ƒê√£ x√≥a {node_modules_path} (ti·∫øt ki·ªám {size_mb:.1f}MB)")
                total_saved += size_mb
                count += 1
    
    print(f"‚úÖ ƒê√£ x√≥a {count} node_modules folders (ti·∫øt ki·ªám {total_saved:.1f}MB)")
    return total_saved

def cleanup_documentation_files():
    """X√≥a c√°c file documentation th·ª´a th√£i"""
    print("\nüéØ B∆Ø·ªöC 6: D·ªçn d·∫πp Documentation Files")
    
    # Patterns cho documentation files th·ª´a th√£i
    doc_patterns = [
        "*_SUMMARY.md",
        "*_GUIDE.md", 
        "*_REPORT.md",
        "*_ANALYSIS.md",
        "B√ÅO_C√ÅO_*.md",
        "H∆Ø·ªöNG_D·∫™N_*.md",
        "*_ROADMAP.md",
        "*_TROUBLESHOOTING.md",
        "*_IMPLEMENTATION_*.md",
        "*_INTEGRATION_*.md"
    ]
    
    # Keep important docs
    keep_docs = [
        "README.md",
        "CLAUDE.md",  # Project instructions
        "ROADMAP.md"   # Main roadmap
    ]
    
    count = 0
    total_saved = 0
    
    for pattern in doc_patterns:
        files = glob.glob(pattern)
        for file in files:
            if file not in keep_docs and os.path.exists(file):
                size_mb = os.path.getsize(file) / (1024 * 1024)
                if safe_remove(file):
                    count += 1
                    total_saved += size_mb
    
    print(f"‚úÖ ƒê√£ x√≥a {count} documentation files (ti·∫øt ki·ªám {total_saved:.1f}MB)")
    return total_saved

def cleanup_config_backups():
    """X√≥a config backups v√† temporary configs"""
    print("\nüéØ B∆Ø·ªöC 7: D·ªçn d·∫πp Config Backups")
    
    backup_patterns = [
        "*.backup",
        "*.bak",
        "*_backup_*.json",
        "*.json.backup",
        "*emotion_integration_test_results_*.json",
        "*chatterbox_integration_test_report_*.json",
        "*phase*_achievements_report_*.json",
        "emotion_config_*.json",
        "unified_emotion_migration_report.json"
    ]
    
    count = 0
    total_saved = 0
    
    for pattern in backup_patterns:
        files = glob.glob(pattern, recursive=True)
        for file in files:
            if os.path.exists(file):
                size_mb = os.path.getsize(file) / (1024 * 1024)
                if safe_remove(file):
                    count += 1
                    total_saved += size_mb
    
    print(f"‚úÖ ƒê√£ x√≥a {count} backup files (ti·∫øt ki·ªám {total_saved:.1f}MB)")
    return total_saved

def cleanup_database_files():
    """X√≥a database files th·ª´a th√£i"""
    print("\nüéØ B∆Ø·ªöC 8: D·ªçn d·∫πp Database Files")
    
    db_files = [
        "voice_studio_analytics.db",
        "voice_studio_license.db", 
        "backend/voice_studio_analytics.db",
        "backend/voice_studio_license.db"
    ]
    
    count = 0
    total_saved = 0
    
    for db_file in db_files:
        if os.path.exists(db_file):
            size_mb = os.path.getsize(db_file) / (1024 * 1024)
            if safe_remove(db_file):
                print(f"‚úÖ ƒê√£ x√≥a {db_file} (ti·∫øt ki·ªám {size_mb:.1f}MB)")
                count += 1
                total_saved += size_mb
    
    print(f"‚úÖ ƒê√£ x√≥a {count} database files (ti·∫øt ki·ªám {total_saved:.1f}MB)")
    return total_saved

def main():
    """Main cleanup function"""
    print("üßπ B·∫ÆT ƒê·∫¶U D·ªåN D·∫∏P PROJECT")
    print("=" * 50)
    print("‚ÑπÔ∏è  GI·ªÆ L·∫†I .venv_clean trong th∆∞ m·ª•c tooldiutobe")
    
    # T√≠nh dung l∆∞·ª£ng tr∆∞·ªõc khi cleanup
    initial_size = get_folder_size(".")
    print(f"üìä Dung l∆∞·ª£ng hi·ªán t·∫°i: {initial_size:.1f}MB")
    
    total_saved = 0
    
    # Th·ª±c hi·ªán cleanup theo th·ª© t·ª± ∆∞u ti√™n
    total_saved += cleanup_virtual_environments()  # L·ªõn nh·∫•t (tr·ª´ .venv_clean)
    total_saved += cleanup_node_modules()          # L·ªõn th·ª© 2
    total_saved += cleanup_output_files()          # Audio/video files
    total_saved += cleanup_pycache()               # Nhi·ªÅu files nh·ªè
    total_saved += cleanup_test_files()            # Test scripts
    total_saved += cleanup_documentation_files()   # Docs th·ª´a
    total_saved += cleanup_config_backups()        # Backup files
    total_saved += cleanup_database_files()        # DB files
    
    # T√≠nh dung l∆∞·ª£ng sau cleanup
    final_size = get_folder_size(".")
    actual_saved = initial_size - final_size
    
    print("\n" + "=" * 50)
    print("üéâ HO√ÄN TH√ÄNH D·ªåN D·∫∏P!")
    print(f"üìä Dung l∆∞·ª£ng tr∆∞·ªõc: {initial_size:.1f}MB")
    print(f"üìä Dung l∆∞·ª£ng sau: {final_size:.1f}MB")
    print(f"üíæ Ti·∫øt ki·ªám th·ª±c t·∫ø: {actual_saved:.1f}MB")
    print(f"üìâ Gi·∫£m {(actual_saved/initial_size)*100:.1f}% dung l∆∞·ª£ng")
    
    if final_size < 500:
        print("‚úÖ Th√†nh c√¥ng! Dung l∆∞·ª£ng ƒë√£ xu·ªëng d∆∞·ªõi 500MB")
    else:
        print("‚ö†Ô∏è  C·∫ßn d·ªçn d·∫πp th√™m ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u d∆∞·ªõi 500MB")
    
    print("\nüìù GHI CH√ö:")
    print("- .venv_clean ƒë√£ ƒë∆∞·ª£c gi·ªØ l·∫°i")
    print("- Ch·∫°y 'npm install' trong folder web/ ƒë·ªÉ c√†i l·∫°i node modules")
    print("- C√°c model AI s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ l·∫°i khi c·∫ßn thi·∫øt")

if __name__ == "__main__":
    # Confirm before cleanup
    print("‚ö†Ô∏è  C·∫¢NH B√ÅO: Script n√†y s·∫Ω x√≥a nhi·ªÅu file ƒë·ªÉ gi·∫£m dung l∆∞·ª£ng!")
    print("‚úÖ .venv_clean s·∫Ω ƒë∆∞·ª£c GI·ªÆ L·∫†I")
    print("H√£y backup project tr∆∞·ªõc khi ti·∫øp t·ª•c.")
    
    confirm = input("B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/N): ").lower()
    if confirm in ['y', 'yes']:
        main()
    else:
        print("‚ùå H·ªßy b·ªè cleanup.")