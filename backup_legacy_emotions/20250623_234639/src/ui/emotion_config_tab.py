#!/usr/bin/env python3
"""
üé≠ EMOTION CONFIGURATION TAB - TABLE FORMAT (IMPROVED)
====================================================

Tab qu·∫£n l√Ω c·∫£m x√∫c v·ªõi format b·∫£ng ƒë∆∞·ª£c c·∫£i thi·ªán v·ªÅ UI/UX.

Features:
- Table format v·ªõi row height ph√π h·ª£p
- Preview √¢m thanh ho·∫°t ƒë·ªông t·ªët
- Action buttons g·ªçn g√†ng
- Text formatting nh·∫•t qu√°n
"""

import os
import json
import time
from typing import Dict, List, Optional, Any
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
    QGroupBox, QLabel, QPushButton, QComboBox,
    QSlider, QLineEdit, QMessageBox, QFileDialog,
    QCheckBox, QScrollArea, QFormLayout, QDialog,
    QTableWidget, QTableWidgetItem, QHeaderView,
    QSpinBox, QDoubleSpinBox, QProgressBar
)
from PySide6.QtCore import Qt, Signal, QThread, QTimer
from PySide6.QtGui import QFont, QColor

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from core.emotion_config_manager import EmotionConfigManager, EmotionParameters

# Import TTS provider ƒë·ªÉ preview √¢m thanh th·∫≠t
try:
    from tts.real_chatterbox_provider import RealChatterboxProvider
    PREVIEW_AVAILABLE = True
except ImportError:
    PREVIEW_AVAILABLE = False
    print("‚ö†Ô∏è TTS provider not available - preview will be simulated")

import logging
logger = logging.getLogger(__name__)

class AudioPreviewThread(QThread):
    """Thread ƒë·ªÉ generate preview √¢m thanh th·∫≠t"""
    preview_completed = Signal(str, str, bool)  # emotion_name, audio_path, success
    preview_progress = Signal(str, int)  # emotion_name, progress_percent
    preview_error = Signal(str, str)  # emotion_name, error_message
    
    def __init__(self, emotion_name: str, parameters: dict):
        super().__init__()
        self.emotion_name = emotion_name
        self.parameters = parameters
        self.preview_text = f"ƒê√¢y l√† preview c·ªßa emotion {emotion_name}."
    
    def run(self):
        try:
            self.preview_progress.emit(self.emotion_name, 10)
            
            if PREVIEW_AVAILABLE:
                # S·ª≠ d·ª•ng TTS th·∫≠t ƒë·ªÉ generate audio
                try:
                    provider = RealChatterboxProvider()
                    self.preview_progress.emit(self.emotion_name, 30)
                    
                    # T·∫°o file preview
                    preview_dir = "test_audio_output"
                    os.makedirs(preview_dir, exist_ok=True)
                    audio_path = os.path.join(preview_dir, f"emotion_preview_{self.emotion_name}.wav")
                    
                    self.preview_progress.emit(self.emotion_name, 60)
                    
                    # Generate v·ªõi parameters - s·ª≠ d·ª•ng method ch√≠nh x√°c
                    result = provider.generate_voice(
                        text=self.preview_text,
                        save_path=audio_path,
                        emotion_exaggeration=self.parameters.get('exaggeration', 1.0),
                        cfg_weight=self.parameters.get('cfg_weight', 0.5),
                        speed=self.parameters.get('speed', 1.0)
                    )
                    success = result.get('success', False)
                    
                    self.preview_progress.emit(self.emotion_name, 100)
                    
                    if success and os.path.exists(audio_path):
                        self.preview_completed.emit(self.emotion_name, audio_path, True)
                    else:
                        self.preview_error.emit(self.emotion_name, "TTS generation failed")
                        
                except Exception as e:
                    self.preview_error.emit(self.emotion_name, f"TTS error: {str(e)}")
            else:
                # Simulate preview cho demo
                time.sleep(1.5)
                self.preview_progress.emit(self.emotion_name, 50)
                time.sleep(1.0)
                self.preview_progress.emit(self.emotion_name, 100)
                
                self.preview_completed.emit(self.emotion_name, "simulated_preview.wav", False)
                
        except Exception as e:
            self.preview_error.emit(self.emotion_name, str(e))

class EmotionConfigTab(QWidget):
    """Emotion Configuration Tab v·ªõi Table Format c·∫£i ti·∫øn"""
    
    def __init__(self):
        super().__init__()
        self.emotion_manager = EmotionConfigManager()
        self.preview_threads = {}  # Track active preview threads
        self.setup_ui()
        self.load_emotions_to_table()
        self.connect_signals()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setSpacing(10)
        layout.setContentsMargins(10, 10, 10, 10)
        
        # Header
        header_layout = QHBoxLayout()
        
        # Title ƒë√£ ƒë∆∞·ª£c x√≥a theo y√™u c·∫ßu ng∆∞·ªùi d√πng
        
        header_layout.addStretch()
        
        # Action buttons
        self.add_emotion_btn = QPushButton("‚ûï Th√™m Emotion")
        self.add_emotion_btn.setStyleSheet("""
            QPushButton {
                background-color: white;
                color: #28CD41;
                border: 1px solid #28CD41;
                padding: 8px 15px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #F0FFF4;
                border-color: #25B83A;
            }
        """)
        self.add_emotion_btn.clicked.connect(self.add_custom_emotion)
        header_layout.addWidget(self.add_emotion_btn)
        
        self.export_btn = QPushButton("üì§ Export")
        self.export_btn.setStyleSheet("""
            QPushButton {
                background-color: white;
                color: #007AFF;
                border: 1px solid #007AFF;
                padding: 8px 15px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #F0F8FF;
                border-color: #0056CC;
            }
        """)
        self.export_btn.clicked.connect(self.export_config)
        header_layout.addWidget(self.export_btn)
        
        self.import_btn = QPushButton("üì• Import")
        self.import_btn.setStyleSheet("""
            QPushButton {
                background-color: white;
                color: #FF9500;
                border: 1px solid #FF9500;
                padding: 8px 15px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #FFF9F0;
                border-color: #E6850E;
            }
        """)
        self.import_btn.clicked.connect(self.import_config)
        header_layout.addWidget(self.import_btn)
        
        layout.addLayout(header_layout)
        
        # Filter controls
        filter_layout = QHBoxLayout()
        
        filter_layout.addWidget(QLabel("üîç L·ªçc theo category:"))
        self.category_filter = QComboBox()
        self.category_filter.addItems(["T·∫•t c·∫£", "neutral", "positive", "negative", "dramatic", "special"])
        self.category_filter.currentTextChanged.connect(self.filter_emotions)
        filter_layout.addWidget(self.category_filter)
        
        self.show_custom_only = QCheckBox("Ch·ªâ hi·ªán custom emotions")
        self.show_custom_only.toggled.connect(self.filter_emotions)
        filter_layout.addWidget(self.show_custom_only)
        
        filter_layout.addStretch()
        
        # Statistics
        self.stats_label = QLabel("")
        self.stats_label.setStyleSheet("color: #666; font-size: 12px;")
        filter_layout.addWidget(self.stats_label)
        
        layout.addLayout(filter_layout)
        
        # Main table v·ªõi c·∫£i ti·∫øn + reset column
        self.emotions_table = QTableWidget()
        self.emotions_table.setColumnCount(10)  # TƒÉng th√™m 1 c·ªôt cho reset
        
        headers = [
            "üé≠ Emotion Name",      # 0
            "üìù Description",       # 1  
            "üè∑Ô∏è Category",         # 2
            "üéØ Exaggeration",      # 3
            "‚öñÔ∏è CFG Weight",       # 4
            "üå°Ô∏è Temperature",      # 5
            "‚ö° Speed",            # 6
            "üîÑ Reset",            # 7 - NEW reset column
            "üéµ Preview",          # 8
            "‚öôÔ∏è Actions"          # 9
        ]
        
        self.emotions_table.setHorizontalHeaderLabels(headers)
        
        # Set column widths v·ªõi reset column
        header = self.emotions_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Fixed)  # Name
        header.setSectionResizeMode(1, QHeaderView.Stretch)  # Description
        header.setSectionResizeMode(2, QHeaderView.Fixed)  # Category
        header.setSectionResizeMode(3, QHeaderView.Fixed)  # Exaggeration
        header.setSectionResizeMode(4, QHeaderView.Fixed)  # CFG Weight
        header.setSectionResizeMode(5, QHeaderView.Fixed)  # Temperature
        header.setSectionResizeMode(6, QHeaderView.Fixed)  # Speed
        header.setSectionResizeMode(7, QHeaderView.Fixed)  # Reset
        header.setSectionResizeMode(8, QHeaderView.Fixed)  # Preview
        header.setSectionResizeMode(9, QHeaderView.Fixed)  # Actions
        
        # Set specific widths
        self.emotions_table.setColumnWidth(0, 150)  # Name
        self.emotions_table.setColumnWidth(2, 110)  # Category
        self.emotions_table.setColumnWidth(3, 120)  # Exaggeration
        self.emotions_table.setColumnWidth(4, 120)  # CFG Weight
        self.emotions_table.setColumnWidth(5, 120)  # Temperature
        self.emotions_table.setColumnWidth(6, 100)  # Speed
        self.emotions_table.setColumnWidth(7, 60)   # Reset
        self.emotions_table.setColumnWidth(8, 100)  # Preview
        self.emotions_table.setColumnWidth(9, 80)   # Actions
        
        # C·∫£i thi·ªán row height v√† table styling
        self.emotions_table.setAlternatingRowColors(True)
        self.emotions_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.emotions_table.verticalHeader().setDefaultSectionSize(45)  # TƒÉng row height
        self.emotions_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #e0e0e0;
                background-color: white;
                alternate-background-color: #f8f9fa;
                font-size: 11px;
            }
            QHeaderView::section {
                background-color: #f1f3f4;
                padding: 8px;
                border: 1px solid #e0e0e0;
                font-weight: bold;
                font-size: 11px;
            }
            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #e0e0e0;
            }
        """)
        
        layout.addWidget(self.emotions_table)
        
        # Status bar
        self.status_label = QLabel("‚úÖ S·∫µn s√†ng")
        self.status_label.setStyleSheet("""
            QLabel {
                background-color: #f8f9fa;
                padding: 6px 10px;
                border-radius: 4px;
                color: #28CD41;
                font-weight: bold;
            }
        """)
        layout.addWidget(self.status_label)
    
    def load_emotions_to_table(self):
        """Load t·∫•t c·∫£ emotions v√†o table v·ªõi styling c·∫£i ti·∫øn"""
        all_emotions = self.emotion_manager.get_all_emotions()
        
        self.emotions_table.setRowCount(len(all_emotions))
        
        row = 0
        for emotion_name, emotion in all_emotions.items():
            is_custom = emotion_name in self.emotion_manager.custom_emotions
            
            # Column 0: Emotion Name - s·ª≠a font weight v√† m√†u ch·ªØ
            name_item = QTableWidgetItem(emotion_name)
            # Font th∆∞·ªùng kh√¥ng in ƒë·∫≠m theo y√™u c·∫ßu
            name_item.setFont(QFont("Arial", 10, QFont.Normal))
            if is_custom:
                name_item.setBackground(QColor("#E8F5E8"))  # Light green for custom
                name_item.setForeground(QColor("#000000"))  # ƒêen cho d·ªÖ ƒë·ªçc
            else:
                name_item.setBackground(QColor("#E3F2FD"))  # Light blue for default
                name_item.setForeground(QColor("#000000"))  # ƒêen cho d·ªÖ ƒë·ªçc
            name_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)  # Read-only
            self.emotions_table.setItem(row, 0, name_item)
            
            # Column 1: Description
            desc_item = QTableWidgetItem(emotion.description)
            desc_item.setFont(QFont("Arial", 9))  # Smaller font cho description
            if not is_custom:
                desc_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)  # Read-only for default
            self.emotions_table.setItem(row, 1, desc_item)
            
            # Column 2: Category v·ªõi sizing ph√π h·ª£p
            category_combo = QComboBox()
            category_combo.addItems(["neutral", "positive", "negative", "dramatic", "special"])
            category_combo.setCurrentText(emotion.category)
            category_combo.setMinimumHeight(30)  # ƒê·∫£m b·∫£o height ƒë·ªß
            category_combo.setStyleSheet("""
                QComboBox {
                    padding: 4px 8px;
                    border: 1px solid #ccc;
                    border-radius: 4px;
                    font-size: 10px;
                }
                QComboBox::drop-down {
                    width: 20px;
                }
            """)
            if not is_custom:
                category_combo.setEnabled(False)  # Read-only for default
            else:
                category_combo.currentTextChanged.connect(
                    lambda text, name=emotion_name: self.update_emotion_parameter(name, 'category', text)
                )
            self.emotions_table.setCellWidget(row, 2, category_combo)
            
            # Column 3: Exaggeration
            exag_spinbox = QDoubleSpinBox()
            exag_spinbox.setRange(0.0, 2.5)
            exag_spinbox.setSingleStep(0.1)
            exag_spinbox.setDecimals(2)
            exag_spinbox.setValue(emotion.exaggeration)
            exag_spinbox.setMinimumHeight(28)
            exag_spinbox.setStyleSheet("font-size: 10px; padding: 2px;")
            exag_spinbox.valueChanged.connect(
                lambda value, name=emotion_name: self.update_emotion_parameter(name, 'exaggeration', value)
            )
            self.emotions_table.setCellWidget(row, 3, exag_spinbox)
            
            # Column 4: CFG Weight
            cfg_spinbox = QDoubleSpinBox()
            cfg_spinbox.setRange(0.0, 1.0)
            cfg_spinbox.setSingleStep(0.05)
            cfg_spinbox.setDecimals(2)
            cfg_spinbox.setValue(emotion.cfg_weight)
            cfg_spinbox.setMinimumHeight(28)
            cfg_spinbox.setStyleSheet("font-size: 10px; padding: 2px;")
            cfg_spinbox.valueChanged.connect(
                lambda value, name=emotion_name: self.update_emotion_parameter(name, 'cfg_weight', value)
            )
            self.emotions_table.setCellWidget(row, 4, cfg_spinbox)
            
            # Column 5: Temperature
            temp_spinbox = QDoubleSpinBox()
            temp_spinbox.setRange(0.1, 1.5)
            temp_spinbox.setSingleStep(0.1)
            temp_spinbox.setDecimals(2)
            temp_spinbox.setValue(emotion.temperature)
            temp_spinbox.setMinimumHeight(28)
            temp_spinbox.setStyleSheet("font-size: 10px; padding: 2px;")
            temp_spinbox.valueChanged.connect(
                lambda value, name=emotion_name: self.update_emotion_parameter(name, 'temperature', value)
            )
            self.emotions_table.setCellWidget(row, 5, temp_spinbox)
            
            # Column 6: Speed
            speed_spinbox = QDoubleSpinBox()
            speed_spinbox.setRange(0.5, 2.0)
            speed_spinbox.setSingleStep(0.1)
            speed_spinbox.setDecimals(1)
            speed_spinbox.setValue(emotion.speed)
            speed_spinbox.setMinimumHeight(28)
            speed_spinbox.setStyleSheet("font-size: 10px; padding: 2px;")
            speed_spinbox.valueChanged.connect(
                lambda value, name=emotion_name: self.update_emotion_parameter(name, 'speed', value)
            )
            self.emotions_table.setCellWidget(row, 6, speed_spinbox)
            
            # Column 7: Reset Button - reset v·ªÅ gi√° tr·ªã ban ƒë·∫ßu (Center aligned)
            reset_btn = QPushButton("üîÑ")
            reset_btn.setFixedSize(30, 30)  # Size g·ªçn g√†ng
            reset_btn.setToolTip(f"Reset {emotion_name} v·ªÅ gi√° tr·ªã ban ƒë·∫ßu")
            reset_btn.setStyleSheet("""
                QPushButton {
                    background-color: white;
                    color: #FF6B35;
                    border: 1px solid #FF6B35;
                    border-radius: 4px;
                    font-size: 12px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #FFF5F5;
                    border-color: #E55A2B;
                }
                QPushButton:pressed {
                    background-color: #FED7CC;
                    border-color: #CC4C26;
                }
            """)
            reset_btn.clicked.connect(lambda checked, name=emotion_name: self.reset_emotion_to_default(name))
            
            # T·∫°o wrapper widget ƒë·ªÉ center button
            reset_widget = QWidget()
            reset_layout = QHBoxLayout(reset_widget)
            reset_layout.setContentsMargins(0, 0, 0, 0)
            reset_layout.addStretch()
            reset_layout.addWidget(reset_btn)
            reset_layout.addStretch()
            self.emotions_table.setCellWidget(row, 7, reset_widget)
            
            # Column 8: Preview Button - compact v√† g·ªçn g√†ng (Center aligned)
            preview_btn = QPushButton("üéµ")
            preview_btn.setFixedSize(35, 35)  # Size c·ªë ƒë·ªãnh g·ªçn g√†ng
            preview_btn.setToolTip(f"Preview {emotion_name}")
            preview_btn.setStyleSheet("""
                QPushButton {
                    background-color: white;
                    color: #6366F1;
                    border: 1px solid #6366F1;
                    border-radius: 6px;
                    font-size: 14px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #F0F0FF;
                    border-color: #4F46E5;
                }
                QPushButton:pressed {
                    background-color: #E0E0FF;
                    border-color: #3730A3;
                }
                QPushButton:disabled {
                    background-color: #F8F9FA;
                    color: #6B7280;
                    border-color: #D1D5DB;
                }
            """)
            preview_btn.clicked.connect(lambda checked, name=emotion_name: self.preview_emotion(name))
            
            # T·∫°o wrapper widget ƒë·ªÉ center button
            preview_widget = QWidget()
            preview_layout = QHBoxLayout(preview_widget)
            preview_layout.setContentsMargins(0, 0, 0, 0)
            preview_layout.addStretch()
            preview_layout.addWidget(preview_btn)
            preview_layout.addStretch()
            self.emotions_table.setCellWidget(row, 8, preview_widget)  # C·∫≠p nh·∫≠t index t·ª´ 7 ‚Üí 8
            
            # Column 9: Actions - ch·ªâ icon g·ªçn g√†ng (Center aligned)
            if is_custom:
                delete_btn = QPushButton("üóë")
                delete_btn.setFixedSize(30, 30)  # Size nh·ªè g·ªçn
                delete_btn.setToolTip(f"X√≥a {emotion_name}")
                delete_btn.setStyleSheet("""
                    QPushButton {
                        background-color: white;
                        color: #EF4444;
                        border: 1px solid #EF4444;
                        border-radius: 4px;
                        font-size: 12px;
                    }
                    QPushButton:hover {
                        background-color: #FEF2F2;
                        border-color: #DC2626;
                    }
                    QPushButton:pressed {
                        background-color: #FEE2E2;
                        border-color: #B91C1C;
                    }
                """)
                delete_btn.clicked.connect(lambda checked, name=emotion_name: self.delete_emotion(name))
                
                # T·∫°o wrapper widget ƒë·ªÉ center button
                delete_widget = QWidget()
                delete_layout = QHBoxLayout(delete_widget)
                delete_layout.setContentsMargins(0, 0, 0, 0)
                delete_layout.addStretch()
                delete_layout.addWidget(delete_btn)
                delete_layout.addStretch()
                self.emotions_table.setCellWidget(row, 9, delete_widget)  # C·∫≠p nh·∫≠t index t·ª´ 8 ‚Üí 9
            else:
                # Default emotions: show locked icon (already centered)
                locked_label = QLabel("üîí")
                locked_label.setAlignment(Qt.AlignCenter)
                locked_label.setToolTip("Emotion m·∫∑c ƒë·ªãnh - kh√¥ng th·ªÉ x√≥a")
                locked_label.setStyleSheet("color: #9CA3AF; font-size: 14px;")
                self.emotions_table.setCellWidget(row, 9, locked_label)  # C·∫≠p nh·∫≠t index t·ª´ 8 ‚Üí 9
            
            row += 1
        
        self.update_statistics()
    
    def update_emotion_parameter(self, emotion_name: str, parameter: str, value):
        """C·∫≠p nh·∫≠t parameter c·ªßa emotion"""
        try:
            # C·∫≠p nh·∫≠t trong emotion manager
            kwargs = {parameter: value}
            self.emotion_manager.modify_emotion(emotion_name, **kwargs)
            
            # L∆∞u custom emotions
            if emotion_name in self.emotion_manager.custom_emotions:
                self.emotion_manager.save_custom_emotions()
            
            self.update_status(f"‚úÖ C·∫≠p nh·∫≠t {emotion_name}: {parameter}={value}")
            
        except Exception as e:
            self.update_status(f"‚ùå L·ªói c·∫≠p nh·∫≠t {emotion_name}: {str(e)}")
    
    def preview_emotion(self, emotion_name: str):
        """Preview emotion v·ªõi √¢m thanh th·∫≠t - c·∫£i thi·ªán error handling"""
        try:
            # Get current parameters
            emotion = self.emotion_manager.get_all_emotions()[emotion_name]
            parameters = {
                'exaggeration': emotion.exaggeration,
                'cfg_weight': emotion.cfg_weight,
                'temperature': emotion.temperature,
                'speed': emotion.speed
            }
            
            # Find preview button t·ª´ wrapper widget
            preview_btn = None
            for row in range(self.emotions_table.rowCount()):
                name_item = self.emotions_table.item(row, 0)
                if name_item and name_item.text() == emotion_name:
                    preview_widget = self.emotions_table.cellWidget(row, 8)  # C·∫≠p nh·∫≠t t·ª´ 7 ‚Üí 8
                    if preview_widget:
                        # L·∫•y preview button t·ª´ layout
                        layout = preview_widget.layout()
                        if layout and layout.count() > 1:
                            preview_btn = layout.itemAt(1).widget()  # Button ·ªü v·ªã tr√≠ gi·ªØa
                    break
            
            if preview_btn:
                # Update button state
                preview_btn.setText("‚è≥")
                preview_btn.setEnabled(False)
                preview_btn.setStyleSheet("""
                    QPushButton {
                        background-color: white;
                        color: #F59E0B;
                        border: 1px solid #F59E0B;
                        border-radius: 6px;
                        font-size: 14px;
                        font-weight: bold;
                    }
                """)
                
                # Start preview thread
                self.preview_threads[emotion_name] = AudioPreviewThread(emotion_name, parameters)
                thread = self.preview_threads[emotion_name]
                
                thread.preview_completed.connect(lambda name, path, success: self.on_preview_completed(name, path, success))
                thread.preview_error.connect(lambda name, error: self.on_preview_error(name, error))
                
                thread.start()
                
                self.update_status(f"üéµ ƒêang t·∫°o preview cho {emotion_name}...")
            
        except Exception as e:
            self.update_status(f"‚ùå L·ªói preview {emotion_name}: {str(e)}")
    
    def on_preview_completed(self, emotion_name: str, audio_path: str, is_real: bool):
        """X·ª≠ l√Ω khi preview ho√†n th√†nh"""
        try:
            # Reset UI - l·∫•y preview button t·ª´ wrapper widget
            for row in range(self.emotions_table.rowCount()):
                name_item = self.emotions_table.item(row, 0)
                if name_item and name_item.text() == emotion_name:
                    preview_widget = self.emotions_table.cellWidget(row, 8)
                    if preview_widget:
                        # L·∫•y preview button t·ª´ layout
                        layout = preview_widget.layout()
                        if layout and layout.count() > 1:
                            preview_btn = layout.itemAt(1).widget()  # Button ·ªü v·ªã tr√≠ gi·ªØa
                            if preview_btn:
                                preview_btn.setText("üéµ")
                                preview_btn.setEnabled(True)
                                preview_btn.setStyleSheet("""
                                    QPushButton {
                                        background-color: white;
                                        color: #6366F1;
                                        border: 1px solid #6366F1;
                                        border-radius: 6px;
                                        font-size: 14px;
                                        font-weight: bold;
                                    }
                                    QPushButton:hover {
                                        background-color: #F0F0FF;
                                        border-color: #4F46E5;
                                    }
                                """)
                    break
            
            # Play audio n·∫øu c√≥
            if is_real and os.path.exists(audio_path):
                # M·ªü file audio v·ªõi default player
                import subprocess
                import platform
                
                try:
                    system = platform.system()
                    if system == "Windows":
                        os.startfile(audio_path)
                    elif system == "Darwin":  # macOS
                        subprocess.run(["open", audio_path])
                    else:  # Linux
                        subprocess.run(["xdg-open", audio_path])
                    
                    self.update_status(f"üéµ Preview {emotion_name} ho√†n th√†nh - ƒëang ph√°t √¢m thanh")
                except Exception as e:
                    self.update_status(f"‚ùå Kh√¥ng th·ªÉ ph√°t audio: {str(e)}")
                    
            else:
                # Simulated preview v·ªõi th√¥ng tin chi ti·∫øt
                emotion_details = self.emotion_manager.get_all_emotions()[emotion_name]
                QMessageBox.information(
                    self,
                    f"üéµ Preview Simulation: {emotion_name}",
                    f"Preview simulation ho√†n th√†nh!\n\n"
                    f"üé≠ Emotion: {emotion_name}\n"
                    f"üìù Description: {emotion_details.description}\n"
                    f"üè∑Ô∏è Category: {emotion_details.category}\n"
                    f"üéØ Exaggeration: {emotion_details.exaggeration:.2f}\n"
                    f"‚öñÔ∏è CFG Weight: {emotion_details.cfg_weight:.2f}\n"
                    f"üå°Ô∏è Temperature: {emotion_details.temperature:.2f}\n"
                    f"‚ö° Speed: {emotion_details.speed:.1f}\n\n"
                    f"üí° ƒê·ªÉ nghe preview th·∫≠t, c·∫ßn TTS engine ho·∫°t ƒë·ªông."
                )
                
                self.update_status(f"‚úÖ Preview simulation {emotion_name} ho√†n th√†nh")
            
            # Cleanup thread
            if emotion_name in self.preview_threads:
                del self.preview_threads[emotion_name]
                
        except Exception as e:
            self.update_status(f"‚ùå L·ªói x·ª≠ l√Ω preview {emotion_name}: {str(e)}")
    
    def on_preview_error(self, emotion_name: str, error: str):
        """X·ª≠ l√Ω l·ªói preview"""
        # Reset UI - l·∫•y preview button t·ª´ wrapper widget
        for row in range(self.emotions_table.rowCount()):
            name_item = self.emotions_table.item(row, 0)
            if name_item and name_item.text() == emotion_name:
                preview_widget = self.emotions_table.cellWidget(row, 8)
                if preview_widget:
                    # L·∫•y preview button t·ª´ layout
                    layout = preview_widget.layout()
                    if layout and layout.count() > 1:
                        preview_btn = layout.itemAt(1).widget()  # Button ·ªü v·ªã tr√≠ gi·ªØa
                        if preview_btn:
                            preview_btn.setText("üéµ")
                            preview_btn.setEnabled(True)
                            preview_btn.setStyleSheet("""
                                QPushButton {
                                    background-color: white;
                                    color: #6366F1;
                                    border: 1px solid #6366F1;
                                    border-radius: 6px;
                                    font-size: 14px;
                                    font-weight: bold;
                                }
                                QPushButton:hover {
                                    background-color: #F0F0FF;
                                    border-color: #4F46E5;
                                }
                            """)
                break
        
        # Cleanup thread
        if emotion_name in self.preview_threads:
            del self.preview_threads[emotion_name]
        
        # Show error with fallback simulation
        reply = QMessageBox.question(
            self, 
            "‚ùå Preview Error", 
            f"L·ªói t·∫°o preview th·∫≠t cho {emotion_name}:\n{error}\n\nB·∫°n c√≥ mu·ªën xem preview simulation kh√¥ng?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.Yes
        )
        
        if reply == QMessageBox.Yes:
            # Show simulation fallback
            emotion_details = self.emotion_manager.get_all_emotions()[emotion_name]
            QMessageBox.information(
                self,
                f"üéµ Preview Simulation: {emotion_name}",
                f"Preview simulation cho {emotion_name}:\n\n"
                f"üé≠ Emotion: {emotion_name}\n"
                f"üìù Description: {emotion_details.description}\n"
                f"üéØ Exaggeration: {emotion_details.exaggeration:.2f}\n"
                f"‚öñÔ∏è CFG Weight: {emotion_details.cfg_weight:.2f}\n"
                f"üå°Ô∏è Temperature: {emotion_details.temperature:.2f}\n"
                f"‚ö° Speed: {emotion_details.speed:.1f}"
            )
        
        self.update_status(f"‚ùå Preview {emotion_name} th·∫•t b·∫°i - hi·ªÉn th·ªã simulation")
    
    def add_custom_emotion(self):
        """Th√™m emotion t√πy ch·ªânh m·ªõi"""
        dialog = QDialog(self)
        dialog.setWindowTitle("‚ûï Th√™m Emotion M·ªõi")
        dialog.setModal(True)
        dialog.resize(400, 350)
        
        layout = QVBoxLayout(dialog)
        
        # Form inputs
        form_layout = QFormLayout()
        
        name_input = QLineEdit()
        name_input.setPlaceholderText("t√™n_emotion_m·ªõi")
        form_layout.addRow("üé≠ T√™n Emotion:", name_input)
        
        desc_input = QLineEdit()
        desc_input.setPlaceholderText("M√¥ t·∫£ emotion n√†y...")
        form_layout.addRow("üìù M√¥ t·∫£:", desc_input)
        
        category_combo = QComboBox()
        category_combo.addItems(["neutral", "positive", "negative", "dramatic", "special"])
        form_layout.addRow("üè∑Ô∏è Category:", category_combo)
        
        exag_spinbox = QDoubleSpinBox()
        exag_spinbox.setRange(0.0, 2.5)
        exag_spinbox.setSingleStep(0.1)
        exag_spinbox.setValue(1.0)
        form_layout.addRow("üéØ Exaggeration:", exag_spinbox)
        
        cfg_spinbox = QDoubleSpinBox()
        cfg_spinbox.setRange(0.0, 1.0)
        cfg_spinbox.setSingleStep(0.05)
        cfg_spinbox.setValue(0.5)
        form_layout.addRow("‚öñÔ∏è CFG Weight:", cfg_spinbox)
        
        temp_spinbox = QDoubleSpinBox()
        temp_spinbox.setRange(0.1, 1.5)
        temp_spinbox.setSingleStep(0.1)
        temp_spinbox.setValue(0.7)
        form_layout.addRow("üå°Ô∏è Temperature:", temp_spinbox)
        
        speed_spinbox = QDoubleSpinBox()
        speed_spinbox.setRange(0.5, 2.0)
        speed_spinbox.setSingleStep(0.1)
        speed_spinbox.setValue(1.0)
        form_layout.addRow("‚ö° Speed:", speed_spinbox)
        
        layout.addLayout(form_layout)
        
        # Buttons
        buttons_layout = QHBoxLayout()
        create_btn = QPushButton("‚úÖ T·∫°o Emotion")
        create_btn.setStyleSheet("""
            QPushButton {
                background-color: white;
                color: #28CD41;
                border: 1px solid #28CD41;
                padding: 8px 15px;
                border-radius: 6px;
                font-weight: bold;
            }
        """)
        
        cancel_btn = QPushButton("‚ùå H·ªßy")
        cancel_btn.setStyleSheet("""
            QPushButton {
                background-color: white;
                color: #FF3B30;
                border: 1px solid #FF3B30;
                padding: 8px 15px;
                border-radius: 6px;
                font-weight: bold;
            }
        """)
        
        buttons_layout.addWidget(cancel_btn)
        buttons_layout.addWidget(create_btn)
        layout.addLayout(buttons_layout)
        
        def create_emotion():
            name = name_input.text().strip()
            description = desc_input.text().strip()
            
            if not name:
                QMessageBox.warning(dialog, "Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p t√™n emotion!")
                return
            
            if name in self.emotion_manager.get_all_emotions():
                QMessageBox.warning(dialog, "Tr√πng t√™n", f"Emotion '{name}' ƒë√£ t·ªìn t·∫°i!")
                return
            
            try:
                self.emotion_manager.create_custom_emotion(
                    name=name,
                    description=description or f"Custom emotion: {name}",
                    category=category_combo.currentText(),
                    exaggeration=exag_spinbox.value(),
                    cfg_weight=cfg_spinbox.value(),
                    temperature=temp_spinbox.value(),
                    speed=speed_spinbox.value()
                )
                
                dialog.accept()
                self.load_emotions_to_table()  # Reload table
                self.update_status(f"‚úÖ ƒê√£ t·∫°o emotion '{name}'")
                
            except Exception as e:
                QMessageBox.critical(dialog, "L·ªói", f"Kh√¥ng th·ªÉ t·∫°o emotion: {str(e)}")
        
        create_btn.clicked.connect(create_emotion)
        cancel_btn.clicked.connect(dialog.reject)
        
        dialog.exec()
    
    def delete_emotion(self, emotion_name: str):
        """X√≥a custom emotion"""
        reply = QMessageBox.question(
            self,
            "X√°c nh·∫≠n x√≥a",
            f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a emotion '{emotion_name}'?\n\nH√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            try:
                if self.emotion_manager.delete_custom_emotion(emotion_name):
                    self.load_emotions_to_table()  # Reload table
                    self.update_status(f"‚úÖ ƒê√£ x√≥a emotion '{emotion_name}'")
                else:
                    self.update_status(f"‚ùå Kh√¥ng th·ªÉ x√≥a emotion '{emotion_name}'")
            except Exception as e:
                self.update_status(f"‚ùå L·ªói x√≥a emotion: {str(e)}")
    
    def filter_emotions(self):
        """L·ªçc emotions theo category v√† custom"""
        category_filter = self.category_filter.currentText()
        show_custom_only = self.show_custom_only.isChecked()
        
        for row in range(self.emotions_table.rowCount()):
            name_item = self.emotions_table.item(row, 0)
            if name_item:
                emotion_name = name_item.text()
                emotion = self.emotion_manager.get_all_emotions().get(emotion_name)
                
                if emotion:
                    # Category filter
                    category_match = (category_filter == "T·∫•t c·∫£" or emotion.category == category_filter)
                    
                    # Custom filter
                    is_custom = emotion_name in self.emotion_manager.custom_emotions
                    custom_match = (not show_custom_only or is_custom)
                    
                    # Show/hide row
                    show_row = category_match and custom_match
                    self.emotions_table.setRowHidden(row, not show_row)
    
    def export_config(self):
        """Export emotion configuration"""
        try:
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Export Emotion Config",
                f"emotion_config_{int(time.time())}.json",
                "JSON Files (*.json)"
            )
            
            if file_path:
                self.emotion_manager.export_emotion_config(file_path)
                self.update_status(f"‚úÖ ƒê√£ export: {os.path.basename(file_path)}")
                
        except Exception as e:
            self.update_status(f"‚ùå L·ªói export: {str(e)}")
    
    def import_config(self):
        """Import emotion configuration"""
        try:
            file_path, _ = QFileDialog.getOpenFileName(
                self, "Import Emotion Config", "",
                "JSON Files (*.json)"
            )
            
            if file_path:
                if self.emotion_manager.import_emotion_config(file_path):
                    self.load_emotions_to_table()  # Reload table
                    self.update_status(f"‚úÖ ƒê√£ import: {os.path.basename(file_path)}")
                else:
                    self.update_status("‚ùå Import th·∫•t b·∫°i")
                    
        except Exception as e:
            self.update_status(f"‚ùå L·ªói import: {str(e)}")
    
    def update_statistics(self):
        """C·∫≠p nh·∫≠t th·ªëng k√™ emotions"""
        try:
            stats = self.emotion_manager.get_emotion_statistics()
            
            stats_text = (
                f"üìä Total: {stats['total_emotions']} | "
                f"üé≠ Default: {stats['default_emotions']} | "
                f"‚ú® Custom: {stats['custom_emotions']} | "
                f"üì¶ Presets: {stats['total_presets']}"
            )
            
            self.stats_label.setText(stats_text)
            
        except Exception:
            self.stats_label.setText("‚ùå L·ªói th·ªëng k√™")
    
    def update_status(self, message: str):
        """C·∫≠p nh·∫≠t status message"""
        self.status_label.setText(message)
        QTimer.singleShot(3000, lambda: self.status_label.setText("‚úÖ S·∫µn s√†ng"))
    
    def connect_signals(self):
        """K·∫øt n·ªëi signals"""
        # Filter signals already connected in setup_ui
        pass 

    def reset_emotion_to_default(self, emotion_name: str):
        """Reset emotion v·ªÅ gi√° tr·ªã g·ªëc c·ªßa c·∫£m x√∫c ƒë√≥ c·ª• th·ªÉ"""
        try:
            # Ki·ªÉm tra xem emotion c√≥ ph·∫£i l√† custom emotion kh√¥ng
            if emotion_name in self.emotion_manager.custom_emotions:
                # N·∫øu l√† custom emotion, x√≥a n√≥ ƒë·ªÉ v·ªÅ l·∫°i default (n·∫øu c√≥)
                if emotion_name in self.emotion_manager.default_emotions:
                    # C√≥ default version, reset v·ªÅ default
                    original_emotion = self.emotion_manager.default_emotions[emotion_name]
                    
                    # Confirm dialog
                    reply = QMessageBox.question(
                        self,
                        "Reset Custom Emotion",
                        f"'{emotion_name}' l√† custom emotion.\n"
                        f"B·∫°n c√≥ mu·ªën reset v·ªÅ gi√° tr·ªã default kh√¥ng?\n\n"
                        f"H√†nh ƒë·ªông n√†y s·∫Ω x√≥a custom settings.",
                        QMessageBox.Yes | QMessageBox.No,
                        QMessageBox.No
                    )
                    
                    if reply == QMessageBox.Yes:
                        # Delete custom emotion ƒë·ªÉ quay v·ªÅ default
                        if self.emotion_manager.delete_custom_emotion(emotion_name):
                            self.load_emotions_to_table()  # Reload table
                            self.update_status(f"‚úÖ Reset {emotion_name} v·ªÅ default")
                        else:
                            self.update_status(f"‚ùå Kh√¥ng th·ªÉ reset {emotion_name}")
                    return
                else:
                    # Pure custom emotion, kh√¥ng c√≥ default version
                    reply = QMessageBox.question(
                        self,
                        "Delete Custom Emotion", 
                        f"'{emotion_name}' l√† custom emotion thu·∫ßn t√∫y (kh√¥ng c√≥ default version).\n"
                        f"B·∫°n c√≥ mu·ªën x√≥a emotion n√†y kh√¥ng?",
                        QMessageBox.Yes | QMessageBox.No,
                        QMessageBox.No
                    )
                    
                    if reply == QMessageBox.Yes:
                        if self.emotion_manager.delete_custom_emotion(emotion_name):
                            self.load_emotions_to_table()  # Reload table
                            self.update_status(f"‚úÖ ƒê√£ x√≥a custom emotion '{emotion_name}'")
                        else:
                            self.update_status(f"‚ùå Kh√¥ng th·ªÉ x√≥a {emotion_name}")
                    return
            
            # L·∫•y gi√° tr·ªã g·ªëc c·ªßa emotion c·ª• th·ªÉ t·ª´ default_emotions
            if emotion_name not in self.emotion_manager.default_emotions:
                QMessageBox.warning(
                    self, 
                    "Kh√¥ng th·ªÉ Reset", 
                    f"Kh√¥ng t√¨m th·∫•y gi√° tr·ªã g·ªëc cho '{emotion_name}'.\n"
                    f"Emotion n√†y kh√¥ng c√≥ trong default emotions."
                )
                return
            
            # L·∫•y emotion g·ªëc
            original_emotion = self.emotion_manager.default_emotions[emotion_name]
            default_values = {
                'exaggeration': original_emotion.exaggeration,
                'cfg_weight': original_emotion.cfg_weight,
                'temperature': original_emotion.temperature,
                'speed': original_emotion.speed
            }
            
            # DEBUG: In gi√° tr·ªã g·ªëc ra console
            print(f"\nüîÑ DEBUG RESET {emotion_name}:")
            print(f"   üìù Original Description: {original_emotion.description}")
            print(f"   üè∑Ô∏è Original Category: {original_emotion.category}")
            print(f"   üìä Original Values:")
            print(f"      üéØ Exaggeration: {default_values['exaggeration']:.2f}")
            print(f"      ‚öñÔ∏è CFG Weight: {default_values['cfg_weight']:.2f}")
            print(f"      üå°Ô∏è Temperature: {default_values['temperature']:.2f}")
            print(f"      ‚ö° Speed: {default_values['speed']:.1f}")
            
            # L·∫•y gi√° tr·ªã hi·ªán t·∫°i ƒë·ªÉ so s√°nh
            current_emotion = self.emotion_manager.get_all_emotions()[emotion_name]
            print(f"   üìà Current Values:")
            print(f"      üéØ Exaggeration: {current_emotion.exaggeration:.2f}")
            print(f"      ‚öñÔ∏è CFG Weight: {current_emotion.cfg_weight:.2f}")
            print(f"      üå°Ô∏è Temperature: {current_emotion.temperature:.2f}")
            print(f"      ‚ö° Speed: {current_emotion.speed:.1f}")
            
            # Confirm dialog v·ªõi gi√° tr·ªã g·ªëc c·ª• th·ªÉ
            dialog_text = (
                f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën reset '{emotion_name}' v·ªÅ gi√° tr·ªã g·ªëc?\n\n"
                f"üìù Emotion g·ªëc: {original_emotion.description}\n"
                f"üè∑Ô∏è Category: {original_emotion.category}\n\n"
                f"üìä Gi√° tr·ªã g·ªëc s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng:\n"
                f"üéØ Exaggeration: {default_values['exaggeration']:.2f}\n"
                f"‚öñÔ∏è CFG Weight: {default_values['cfg_weight']:.2f}\n"
                f"üå°Ô∏è Temperature: {default_values['temperature']:.2f}\n"
                f"‚ö° Speed: {default_values['speed']:.1f}\n\n"
                f"üí° Gi√° tr·ªã hi·ªán t·∫°i:\n"
                f"üéØ Exaggeration: {current_emotion.exaggeration:.2f}\n"
                f"‚öñÔ∏è CFG Weight: {current_emotion.cfg_weight:.2f}\n"
                f"üå°Ô∏è Temperature: {current_emotion.temperature:.2f}\n"
                f"‚ö° Speed: {current_emotion.speed:.1f}"
            )
            
            reply = QMessageBox.question(
                self,
                "Reset Emotion v·ªÅ G·ªëc",
                dialog_text,
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                # Update emotion parameters v·ªÅ gi√° tr·ªã g·ªëc
                self.emotion_manager.modify_emotion(emotion_name, **default_values)
                
                # Save n·∫øu l√† custom emotion (ƒë√£ modify t·ª´ default)
                if emotion_name in self.emotion_manager.custom_emotions:
                    self.emotion_manager.save_custom_emotions()
                
                # üéØ UPDATE UI trong table v·ªõi blocking signals ƒë·ªÉ tr√°nh recursive calls
                for row in range(self.emotions_table.rowCount()):
                    name_item = self.emotions_table.item(row, 0)
                    if name_item and name_item.text() == emotion_name:
                        print(f"   üîÑ Updating UI for row {row}")
                        
                        # Update spinboxes v·ªõi gi√° tr·ªã g·ªëc c·ª• th·ªÉ - BLOCK SIGNALS
                        exag_spinbox = self.emotions_table.cellWidget(row, 3)
                        if exag_spinbox:
                            exag_spinbox.blockSignals(True)
                            exag_spinbox.setValue(default_values['exaggeration'])
                            exag_spinbox.blockSignals(False)
                            print(f"   ‚úÖ Updated exaggeration: {default_values['exaggeration']:.2f}")
                        
                        cfg_spinbox = self.emotions_table.cellWidget(row, 4)
                        if cfg_spinbox:
                            cfg_spinbox.blockSignals(True)
                            cfg_spinbox.setValue(default_values['cfg_weight'])
                            cfg_spinbox.blockSignals(False)
                            print(f"   ‚úÖ Updated cfg_weight: {default_values['cfg_weight']:.2f}")
                        
                        temp_spinbox = self.emotions_table.cellWidget(row, 5)
                        if temp_spinbox:
                            temp_spinbox.blockSignals(True)
                            temp_spinbox.setValue(default_values['temperature'])
                            temp_spinbox.blockSignals(False)
                            print(f"   ‚úÖ Updated temperature: {default_values['temperature']:.2f}")
                        
                        speed_spinbox = self.emotions_table.cellWidget(row, 6)
                        if speed_spinbox:
                            speed_spinbox.blockSignals(True)
                            speed_spinbox.setValue(default_values['speed'])
                            speed_spinbox.blockSignals(False)
                            print(f"   ‚úÖ Updated speed: {default_values['speed']:.1f}")
                        
                        # Force table update v√† refresh statistics
                        self.emotions_table.update()
                        self.emotions_table.repaint()
                        self.update_statistics()  # Update emotion count statistics
                        
                        print(f"   üéâ UI update completed for {emotion_name}")
                        break
                
                self.update_status(f"‚úÖ Reset {emotion_name} v·ªÅ gi√° tr·ªã g·ªëc: Exag={default_values['exaggeration']:.2f}, CFG={default_values['cfg_weight']:.2f}")
                
                # üîÑ ALTERNATIVE: Reload entire table to ensure consistency
                # Uncomment this line if individual widget updates don't work properly
                # self.load_emotions_to_table()
                
        except Exception as e:
            self.update_status(f"‚ùå L·ªói reset {emotion_name}: {str(e)}")
            QMessageBox.warning(self, "L·ªói Reset", f"Kh√¥ng th·ªÉ reset {emotion_name} v·ªÅ gi√° tr·ªã g·ªëc:\n{str(e)}") 